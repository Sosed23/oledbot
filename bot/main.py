import asyncio
from aiogram import types
from aiogram.filters import Command
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from loguru import logger

from bot.config import bot, admins, dp, target_chat_id
from bot.users.router import user_router
from bot.stocks.router_product import product_router
from bot.stocks.router_cart import cart_router
from bot.stocks.router_search import search_router
from bot.stocks.router_order import order_router
from bot.stocks.router_aiagent import aiagent_router
from bot.stocks.group_router import group_router

# Middleware –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É)
class ForwardIncomingMessageMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.Message, data: dict):
        try:
            if event.chat.type == "private":  # –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                user_id = event.from_user.id
                username = event.from_user.username if event.from_user.username else "None"
                user_info = f"–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username})"
                await bot.send_message(
                    chat_id=target_chat_id,
                    text=user_info
                )
                await bot.forward_message(
                    chat_id=target_chat_id,
                    from_chat_id=event.chat.id,
                    message_id=event.message_id
                )
                logger.info(f"{user_info} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target_chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ (—á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
        return await handler(event, data)

# Middleware –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –±–æ—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
class ForwardOutgoingMessageMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data: dict):
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã middleware
        if isinstance(event, types.Message):
            logger.debug(f"–ò—Å—Ö–æ–¥—è—â–µ–µ middleware –≤—ã–∑–≤–∞–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event.text}")
        elif isinstance(event, types.CallbackQuery):
            logger.debug(f"–ò—Å—Ö–æ–¥—è—â–µ–µ middleware –≤—ã–∑–≤–∞–Ω–æ –¥–ª—è callback: {event.data}")

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await handler(event, data)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {result}")

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        if result is None:
            logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚Äî None, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return result

        try:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —ç—Ç–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(result, types.Message):
                user_info = f"–ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {result.chat.id} (@{result.chat.username})"
                logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {result.text}")
                await bot.send_message(
                    chat_id=target_chat_id,
                    text=user_info
                )
                await bot.forward_message(
                    chat_id=target_chat_id,
                    from_chat_id=result.chat.id,
                    message_id=result.message_id
                )
                logger.info(f"{user_info} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target_chat_id}")
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            elif isinstance(result, list) and all(isinstance(msg, types.Message) for msg in result):
                for msg in result:
                    user_info = f"–ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {msg.chat.id} (@{msg.chat.username})"
                    logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")
                    await bot.send_message(
                        chat_id=target_chat_id,
                        text=user_info
                    )
                    await bot.forward_message(
                        chat_id=target_chat_id,
                        from_chat_id=msg.chat.id,
                        message_id=msg.message_id
                    )
                    logger.info(f"{user_info} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target_chat_id}")
            else:
                logger.warning(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π: {type(result)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        return result

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é (–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
async def set_commands():
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
async def start_bot():
    await set_commands()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, f'–Ø –∑–∞–ø—É—â–µ–Ωü•≥.')
        except:
            pass
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
async def stop_bot():
    try:
        for admin_id in admins:
            await bot.send_message(admin_id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞ —á—Ç–æ?üòî')
    except:
        pass
    logger.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.middleware(ForwardIncomingMessageMiddleware())
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è Message)
    dp.message.outer_middleware(ForwardOutgoingMessageMiddleware())
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è CallbackQuery)
    dp.callback_query.outer_middleware(ForwardOutgoingMessageMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(user_router)
    dp.include_router(product_router)
    dp.include_router(cart_router)
    dp.include_router(search_router)
    dp.include_router(order_router)
    dp.include_router(aiagent_router)
    dp.include_router(group_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")