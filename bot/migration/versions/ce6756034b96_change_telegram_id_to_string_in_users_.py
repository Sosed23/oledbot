"""change telegram_id to String in users and carts

Revision ID: ce6756034b96
Revises: 
Create Date: 2025-09-11 16:21:09.436531

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ce6756034b96'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('models_new')
    op.drop_table('brands')
    op.drop_table('devices')
    op.drop_table('services')
    op.drop_table('series')
    op.alter_column('carts', 'telegram_id',
               existing_type=sa.BIGINT(),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('orders', 'telegram_id',
               existing_type=sa.BIGINT(),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('users', 'telegram_id',
               existing_type=sa.BIGINT(),
               type_=sa.String(length=20),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'telegram_id',
               existing_type=sa.String(length=20),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('orders', 'telegram_id',
               existing_type=sa.String(length=20),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('carts', 'telegram_id',
               existing_type=sa.String(length=20),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.create_table('series',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('series_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('brand_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], name='series_brand_id_fkey'),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], name='series_device_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='series_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('services',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='services_pkey'),
    sa.UniqueConstraint('name', name='services_name_key')
    )
    op.create_table('devices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('devices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='devices_pkey'),
    sa.UniqueConstraint('name', name='devices_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('brands',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('brands_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='brands_pkey'),
    sa.UniqueConstraint('name', name='brands_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('models_new',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('brand_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('series_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], name='models_new_brand_id_fkey'),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], name='models_new_device_id_fkey'),
    sa.ForeignKeyConstraint(['series_id'], ['series.id'], name='models_new_series_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='models_new_pkey')
    )
    # ### end Alembic commands ###
