from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import types
from loguru import logger
from bot.planfix import planfix_price_basic_back_cover, planfix_basic_nomenclature_re_gluing, planfix_stock_balance
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO

from bot.operations import OPERATION_NAMES, PLANFIX_TO_OPERATION_ID


import asyncio

async def handle_back_cover_common(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        data_basic_nomenclature_re_gluing = await planfix_basic_nomenclature_re_gluing(model_id=model_id, filter_id=104414)

        # await callback.message.answer(f'{data_basic_nomenclature_re_gluing}')

        messages = []
        
        for entry in data_basic_nomenclature_re_gluing['directoryEntries']:
            pricelist_key = None
            name_model = None
            # basic_key = entry.get('key')
            
            for field_data in entry['customFieldData']:
                if field_data['field']['id'] == 3884 and field_data['field']['name'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
                    name_model = field_data['value']
                if field_data['field']['id'] == 3902 and field_data['field']['name'] == '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç':
                    pricelist_key = field_data['value'].get('id')
                if field_data['field']['id'] == 3906 and field_data['field']['name'] == '–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã':
                    task_id = field_data['value'].get('id')
                if field_data['field']['id'] == 3892 and field_data['field']['name'] == '–¶–≤–µ—Ç':
                    color = field_data['value']['value']
            
            if pricelist_key is not None and pricelist_key != 0 and name_model:
                messages.append(f"ID: {pricelist_key}, name_model: {name_model}")
                data_pricelist = await planfix_price_basic_back_cover(model_id=model_id, pricelist_key=pricelist_key)

                if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                    for field_data in data_pricelist['entry']['customFieldData']:
                        if 'value' not in field_data or field_data['value'] is None:
                            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ 'value' –≤ field_data: {field_data}")
                            continue
                        
                        value = field_data['value']
                        if value != 0:
                            planfix_field_id = field_data['field']['id']
                            operation_id = PLANFIX_TO_OPERATION_ID.get(planfix_field_id)
                            if operation_id is None:
                                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Planfix field_id: {planfix_field_id}, field_data: {field_data}")
                                continue
                            
                            name_operation = OPERATION_NAMES.get(operation_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
                            pricelist_formatted = f"{int(value):,}".replace(",", " ")
                            value_re_gluing = (
                                f"üîπ <b>{name_operation}</b>\n"
                                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
                                f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                                f"üí∞ –¶–µ–Ω–∞: <b>{pricelist_formatted} —Ä—É–±.</b>"
                            )
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–æ–ª—å–∫–æ –¥–ª—è callback_data
                            callback_model_id = str(model_id)[:10]
                            callback_model_name = model_name[:15]
                            callback_data = f"re_gluing_cart:{callback_model_id}:{callback_model_name}:{operation_id}:{task_id}:{pricelist_formatted}"
                            logger.debug(f"Callback data: {callback_data} (length: {len(callback_data.encode('utf-8'))} bytes)")
                            
                            await callback.message.answer(
                                f"{value_re_gluing}",
                                reply_markup=in_kb.re_gluing_cart_keyboard(
                                    model_id=callback_model_id,
                                    model_name=callback_model_name,
                                    operation=operation_id,
                                    task_id=task_id,
                                    price=value
                                )
                            )

            #     else:
            #         logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç planfix_price_basic_nomenclature_re_gluing: {data_pricelist}")
            # else:
            #     logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –≤—ã–∑–æ–≤ planfix_price_basic_back_cover: task_id={task_id}, pricelist_key={pricelist_key}, name_model={name_model}")
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_re_gluing_common: {e}")
        result = await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return result