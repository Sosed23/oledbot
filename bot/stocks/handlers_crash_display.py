from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from loguru import logger
from bot.planfix import planfix_stock_balance_filter, upload_photo_to_planfix, planfix_price_assembly_basic_back_cover, add_outgoing_comment_to_chat
from bot.utils.planfix_utils import extract_price_from_data
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO
from bot.users.dao import UserDAO
from collections import defaultdict
import asyncio
import re

from bot.operations import OPERATION_NAMES, PLANFIX_TO_OPERATION_ID

media_groups = defaultdict(list)
MEDIA_GROUP_TIMEOUT = 1.0

class CrashDisplayOrder(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_photo = State()

def strip_html(text: str) -> str:
    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)

async def handle_crash_display_common(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    data_crash_display_plus = await planfix_stock_balance_filter(model_id=model_id, operation="2")
    data_crash_display_minus = await planfix_stock_balance_filter(model_id=model_id, operation="3")

    price_plus = extract_price_from_data(data_crash_display_plus)
    price_minus = extract_price_from_data(data_crash_display_minus)
    
    operation = 7

    # –ü–æ–ª—É—á–∞–µ–º chat_pf_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Planfix
    telegram_id = callback.from_user.id
    data_chat_pf_id = await UserDAO.find_one_or_none(telegram_id=telegram_id)
    if not data_chat_pf_id or not data_chat_pf_id.chat_pf_id:
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_pf_id")
        await callback.message.answer("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        await state.clear()
        return
    chat_pf_id = data_chat_pf_id.chat_pf_id

    if price_plus and float(price_plus) > 0:
        formatted_price_plus = f"{int(price_plus):,}".replace(",", " ")
        message_text = (
            f"üîπ <b>–ë–∏—Ç–∏–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{model_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price_plus} —Ä—É–±.</b>"
        )
        
        result = await callback.message.answer(
            message_text,
            reply_markup=in_kb.crash_display_cart_keyboard(
                model_id=model_id,
                model_name=model_name,
                operation=operation,
                task_id=model_id,
                price=price_plus,
                touch_or_backlight='False'
            ),
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix
        clean_message_text = strip_html(message_text)
        success = await add_outgoing_comment_to_chat(chat_pf_id=chat_pf_id, comment=clean_message_text)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix.")
        else:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        await callback.answer()

    if price_minus and float(price_minus) > 0:
        formatted_price_minus = f"{int(price_minus):,}".replace(",", " ")
        message_text = (
            f"üîπ <b>–ë–∏—Ç–∏–∫ —Å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{model_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price_minus} —Ä—É–±.</b>"
        )
        
        result = await callback.message.answer(
            message_text,
            reply_markup=in_kb.crash_display_cart_keyboard(
                model_id=model_id,
                model_name=model_name,
                operation=operation,
                task_id=model_id,
                price=price_minus,
                touch_or_backlight='True'
            ),
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix
        clean_message_text = strip_html(message_text)
        success = await add_outgoing_comment_to_chat(chat_pf_id=chat_pf_id, comment=clean_message_text)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix.")
        else:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    
        await callback.answer()

async def add_crash_display_search_ai_cart(callback_query: types.CallbackQuery, prefix: str, state: FSMContext):
    model_id = int(callback_query.data.split('_')[1])
    model_name = callback_query.data.split('_')[2]
    operation = callback_query.data.split('_')[3]
    task_id = int(callback_query.data.split('_')[4])
    price = int(float(callback_query.data.split('_')[5]))
    touch_or_backlight = callback_query.data.split('_')[6]
    
    touch_or_backlight_bool = touch_or_backlight.lower() == 'true'

    await state.update_data(
        model_id=model_id,
        model_name=model_name,
        operation=operation,
        task_id=task_id,
        price=price,
        touch_or_backlight=touch_or_backlight_bool,
        telegram_id=callback_query.from_user.id
    )

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–∏–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(CrashDisplayOrder.waiting_for_quantity)
    
    await callback_query.answer()

async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:")
        return

    await state.update_data(quantity=quantity)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –±–∏—Ç–∏–∫–∞:")
    await state.set_state(CrashDisplayOrder.waiting_for_photo)

async def process_photo(message: types.Message, state: FSMContext):
    from bot.config import bot
    
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        return

    media_group_id = message.media_group_id
    if media_group_id:
        media_groups[media_group_id].append(message)
        await asyncio.sleep(MEDIA_GROUP_TIMEOUT)
        if media_groups[media_group_id][-1].message_id != message.message_id:
            return
        messages = media_groups[media_group_id]
        del media_groups[media_group_id]
    else:
        messages = [message]

    state_data = await state.get_data()
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {state_data}")

    model_id = state_data.get('model_id')
    model_name = state_data.get('model_name')
    operation = state_data.get('operation')
    price = state_data.get('price')
    touch_or_backlight = state_data.get('touch_or_backlight')
    telegram_id = state_data.get('telegram_id')
    quantity = state_data.get('quantity')

    data_chat_pf_id = await UserDAO.find_one_or_none(telegram_id=telegram_id)
    if not data_chat_pf_id or not data_chat_pf_id.chat_pf_id:
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_pf_id")
        await message.answer("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        await state.clear()
        return
    chat_pf_id = data_chat_pf_id.chat_pf_id

    photo_files = []
    photo_file_ids = []
    failed_photos = 0

    for msg in messages:
        if msg.photo:
            photo = msg.photo[-1]
            try:
                from io import BytesIO
                buffer = BytesIO()
                await bot.download(file=photo.file_id, destination=buffer)
                photo_bytes = buffer.getvalue()
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏–∑ Telegram, —Ä–∞–∑–º–µ—Ä: {len(photo_bytes)} –±–∞–π—Ç")
                photo_files.append(photo_bytes)
                photo_file_ids.append(photo.file_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º —Ñ–æ—Ç–æ –∏–∑ Telegram: {e}")
                failed_photos += 1
                continue

    if not photo_files:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if failed_photos > 0:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {failed_photos} —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(photo_files)} —Ñ–æ—Ç–æ.")

    success = await upload_photo_to_planfix(chat_pf_id=chat_pf_id, photo_files=photo_files)
    if not success:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    task_id_crash_display_response = await planfix_price_assembly_basic_back_cover(model_id=model_id)
    task_id_crash_display = task_id_crash_display_response['directoryEntries'][0]['key']

    existing_cart = await CartDAO.find_one_or_none(
        telegram_id=telegram_id,
        product_id=model_id,
        operation=operation
    )
    if existing_cart:
        new_quantity = existing_cart.quantity + quantity
        existing_file_ids = existing_cart.photo_file_ids or []
        updated_file_ids = existing_file_ids + photo_file_ids
        data = {
            "quantity": new_quantity,
            "photo_file_ids": updated_file_ids
        }
        valid_columns = ["quantity", "photo_file_ids"]
        data = {k: v for k, v in data.items() if k in valid_columns}
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data}")
        await CartDAO.update(
            filter_by={
                "telegram_id": telegram_id,
                "product_id": model_id,
                "operation": operation
            },
            data=data
        )
        logger.info(f"–ó–∞–ø–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: telegram_id={telegram_id}, product_id={model_id}, operation={operation}, –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={new_quantity}")
    else:
        await CartDAO.add(
            telegram_id=telegram_id,
            product_id=model_id,
            product_name=model_name,
            quantity=quantity,
            operation=operation,
            task_id=task_id_crash_display,
            price=price,
            assembly_required=False,
            touch_or_backlight=touch_or_backlight,
            photo_file_ids=photo_file_ids
        )
        logger.info(f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: telegram_id={telegram_id}, product_id={model_id}, operation={operation}")

    if touch_or_backlight == False:
        message_text = (
            f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
            f"üîπ <b>–ë–∏—Ç–∏–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id_crash_display}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity} —à—Ç.</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>"
        )
        await message.answer(message_text, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix
        clean_message_text = strip_html(message_text)
        success = await add_outgoing_comment_to_chat(chat_pf_id=chat_pf_id, comment=clean_message_text)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix.")
        else:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    else:
        message_text = (
            f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
            f"üîπ <b>–ë–∏—Ç–∏–∫ —Å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id_crash_display}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity} —à—Ç.</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>"
        )
        await message.answer(message_text, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix
        clean_message_text = strip_html(message_text)
        success = await add_outgoing_comment_to_chat(chat_pf_id=chat_pf_id, comment=clean_message_text)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Planfix.")
        else:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    await state.clear()