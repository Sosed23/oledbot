from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import types
from loguru import logger
from bot.planfix import planfix_all_production_filter, planfix_production_task_id
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO

async def handle_production_common(callback: CallbackQuery, state: FSMContext, operation: str = "4"):

    try:
        state_data = await state.get_data()
        model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        data_production = await planfix_all_production_filter(model_id=model_id)
        
        if not data_production or "tasks" not in data_production:
            result = await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.")
            await callback.answer()
            return result
        
        messages = []
        for task in data_production["tasks"]:
            task_id = task["id"]
            model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            for field in task.get("customFieldData", []):
                field_name = field["field"].get("name", "")
                if field_name == "–ú–æ–¥–µ–ª—å":
                    model = field["value"].get("value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                elif field_name == "Price":
                    price = field.get("value", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                    formatted_price = f"{int(price):,}".replace(",", " ")
                elif field_name == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏":
                    description = field.get("value", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            message_text = (
                f"üîπ <b>–î–∏—Å–ø–ª–µ–π (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
            
            result = await callback.message.answer(
                message_text,
                reply_markup=in_kb.aiagent_cart_keyboard(
                    model_id=model_id, model_name=model_name, operation=operation, task_id=task_id
                ),
                parse_mode="HTML"
            )
            messages.append(result)
        
        await callback.answer()
        return messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_production_common: {e}")
        result = await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return result

async def add_to_cart(callback_query: types.CallbackQuery, prefix: str):

    try:
        data_parts = callback_query.data.split('_')
        if len(data_parts) != 5 or data_parts[0] != prefix:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        
        model_id = int(data_parts[1])
        model_name = data_parts[2]
        operation = data_parts[3]
        task_id = data_parts[4]
        telegram_id = callback_query.from_user.id

        data_product = await planfix_production_task_id(task_id=task_id)
        custom_fields = data_product.get("task", {}).get("customFieldData", [])

        price = 0
        for field in custom_fields:
            field_id = field.get("field", {}).get("id")
            if field_id == 12126:
                price = field.get("value") or 0

        await CartDAO.add(
            telegram_id=telegram_id,
            product_id=model_id,
            product_name=model_name,
            task_id=int(task_id),
            operation=operation,
            quantity=1,
            price=price
        )

        result = await callback_query.message.answer(
            f"üìù –ù–æ–≤—ã–π –¥–∏—Å–ø–ª–µ–π (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>\n",
            parse_mode="HTML"
        )
        await callback_query.message.delete()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è telegram_id={telegram_id}: {e}")
        result = await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return result