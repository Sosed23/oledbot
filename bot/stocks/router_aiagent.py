from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.ai_agent import ai_agent_n8n
from bot.planfix import planfix_stock_balance_filter, planfix_all_production_filter
from bot.planfix import planfix_production_task_id
from bot.users.keyboards import inline_kb as kb
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO
import json
from loguru import logger


aiagent_router = Router()


################ AI AGENT #######################

class SearchModelState(StatesGroup):
    waiting_for_model = State()

@aiagent_router.message(F.text == '‚ú® –ü–æ–∏—Å–∫ —Å –ò–ò')
async def search_aiagent(message: Message, state: FSMContext):
    await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ‚ú® –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç OLED ‚ú®.\n–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –º–æ–¥–µ–ª—å –±—Ä–µ–Ω–¥–∞ Samsung –∏–ª–∏ Apple.')
    await state.set_state(SearchModelState.waiting_for_model)

@aiagent_router.message(SearchModelState.waiting_for_model)
async def receive_model(message: Message, state: FSMContext):
    model = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    await state.update_data(model=model)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_message = await message.answer("üîç –ò–¥—ë—Ç –ø–æ–∏—Å–∫...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å model –≤ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    result = await ai_agent_n8n(query=model)
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ 'output', –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π JSON
    json_string = result['output']

    # –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å
    parsed_data = json.loads(json_string)
    status = parsed_data['status']

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    await search_message.delete()

    if status == "successfully":
        model_name = parsed_data['model_name']
        model_id = parsed_data['model_id']
        
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {model_name} –∏ {json_string} üì±', reply_markup=in_kb.search_aiagent_keyboard())
        await state.update_data(model_name=model_name, model_id=model_id)
    else:
        await message.answer("–î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")


####################### –¶–ï–ù–ê –ü–ï–†–ï–ö–õ–ï–ô–ö–ò ###############################


@aiagent_router.callback_query(F.data == "search_aiagent_re-gluing")
async def handle_re_gluing(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_re_gluing = await planfix_stock_balance_filter(model_id=model_id, operation="1")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_re_gluing)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞: {price} RUB**"
    else:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.**"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–¶–µ–Ω–∞ –ø–µ—Ä–µ–∫–ª–µ–π–∫–∏' –¥–ª—è –º–æ–¥–µ–ª–∏:\n{prices_text}", parse_mode="Markdown"
    )
    await callback.answer()


def extract_price_from_data(data_re_gluing):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_re_gluing.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ü–†–û–î–ê–¢–¨ –ë–ò–¢–ò–ö ###############################


@aiagent_router.callback_query(F.data == "search_aiagent_crash-display")
async def handle_crash_display(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_crash_display_plus = await planfix_stock_balance_filter(model_id=model_id, operation="2")
    data_crash_display_minus = await planfix_stock_balance_filter(model_id=model_id, operation="3")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price_plus = extract_price_from_data(data_crash_display_plus)
    price_minus = extract_price_from_data(data_crash_display_minus)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫' –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}\n"
    if price_plus and float(price_plus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_plus} RUB\n"
    if price_minus and float(price_minus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_minus} RUB\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message)
    await callback.answer()


def extract_price_from_data(data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ì–û–¢–û–í–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø ###############################

@aiagent_router.callback_query(F.data == "search_aiagent_production")
async def handle_aiagent_production(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    operation = "4"
    
    data_production = await planfix_all_production_filter(model_id=model_id)
    
    if not data_production or "tasks" not in data_production:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.")
        return
    
    for task in data_production["tasks"]:
        task_id = task["id"]
        model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        for field in task.get("customFieldData", []):
            field_name = field["field"].get("name", "")
            if field_name == "–ú–æ–¥–µ–ª—å":
                model = field["value"].get("value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            elif field_name == "Price":
                price = field.get("value", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            elif field_name == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏":
                description = field.get("value", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        message_text = (
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
        
        await callback.message.answer(message_text, reply_markup=in_kb.aiagent_cart_keyboard(
            model_id=model_id, model_name=model_name, operation=operation, task_id=task_id), parse_mode="HTML")
    
    await callback.answer()


def extract_price_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


@aiagent_router.callback_query(F.data.startswith('aiagent-cart_'))
async def add_aiagent_cart(callback_query: types.CallbackQuery):
    try:
        model_id = int(callback_query.data.split('_')[1])
        model_name = callback_query.data.split('_')[2]
        operation = callback_query.data.split('_')[3]
        task_id = callback_query.data.split('_')[4]
        telegram_id = callback_query.from_user.id

        data_product = await planfix_production_task_id(task_id=task_id)
        custom_fields = data_product.get("task", {}).get("customFieldData", [])

        price = 0
        for field in custom_fields:
            field_id = field.get("field", {}).get("id")
            if field_id == 12126:  
                price = field.get("value") or 0

        await CartDAO.add(
            telegram_id=telegram_id,
            product_id=model_id,
            product_name=model_name,
            task_id=int(task_id),
            operation=operation,
            quantity=1,
            price=price
        )
        await callback_query.answer(f'–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä {model_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        await callback_query.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è telegram_id={telegram_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


####################### –ó–ê–ü–ß–ê–°–¢–ò ###############################

@aiagent_router.callback_query(F.data == "search_aiagent_spare-parts")
async def handle_spare_parts(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_spare_parts = await planfix_stock_balance_filter(model_id=model_id, operation="5")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_spare_parts)
    balance = extract_balance_from_data(data_spare_parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_balance = f"–¶–µ–Ω–∞: {price} RUB –û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç."
    else:
        prices_balance = f"{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ó–∞–ø—á–∞—Å—Ç–∏'.\n–ú–æ–¥–µ–ª–∏: {model_name}\n"
        f"{prices_balance}"
    )
    await callback.answer()


def extract_price_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None