from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.planfix import planfix_production_task_id, planfix_basic_back_cover_cart, planfix_price_basic_back_cover, planfix_price_assembly_basic_back_cover
from bot.stocks.keyboards import inline_kb_cart as kb
from bot.stocks.dao import CartDAO
from bot.operations import OPERATION_NAMES
import logging

cart_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
class CartStates(StatesGroup):
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–ø—Ä–æ—Å–æ–º "–î–∞/–ù–µ—Ç"
def get_confirmation_keyboard(prod_cart_id: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data=f"cart_confirm_yes_{prod_cart_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cart_confirm_no_{prod_cart_id}")
        ]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—Ä–∑–∏–Ω—É"
@cart_router.callback_query(F.data.startswith("re-gluing-cart_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω add_to_cart —Å callback_data: {callback.data}")
    telegram_id = callback.from_user.id
    data = callback.data.split("_")
    if len(data) != 6:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
        return

    try:
        product_id = int(data[1])
        product_name = data[2]
        operation = int(data[3])
        task_id = int(data[4])
        price = int(float(data[5]))
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö callback_data: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: product_id={product_id}, product_name={product_name}, operation={operation}, task_id={task_id}, price={price}")

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item_id = await CartDAO.add(
        telegram_id=telegram_id,
        product_id=product_id,
        task_id=task_id,
        product_name=product_name,
        operation=str(operation),
        price=price,
        quantity=1,
        assembly_required=False,
        touch_or_backlight=False
    )

    if not isinstance(cart_item_id, int):
        logger.error(f"CartDAO.add –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(cart_item_id)}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
        return

    if operation == 6:
        # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ 6 –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        formatted_price = f"{price:,.0f}".replace(',', ' ')

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
        data_price_assembly = await planfix_price_assembly_basic_back_cover(model_id=product_id)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
        price_assembly = None
        try:
            if data_price_assembly.get("result") == "success":
                entries = data_price_assembly.get("directoryEntries", [])
                if entries and "customFieldData" in entries[0]:
                    custom_fields = entries[0]["customFieldData"]
                    for field in custom_fields:
                        if field.get("field", {}).get("id") == 3780:  # –ü–æ–ª–µ "–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏"
                            price_assembly = field.get("value")
                            break
            if price_assembly is None:
                logger.warning(f"–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data_price_assembly}")
                price_assembly = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏: {e}, –¥–∞–Ω–Ω—ã–µ: {data_price_assembly}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏.")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.", show_alert=True)
            return

        message_text = (
            f"üîπ <b>–ó–∞–º–µ–Ω–∞/–°–±–æ—Ä–∫–∞ –∑–∞–¥–Ω–µ–π –∫—Ä—ã—à–∫–∏</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
            f"‚úÖ <b>–î–æ–±–∞–≤–∏—Ç—å –†–∞–∑–±–æ—Ä/–°–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>\n"
            f"üí∞ –¶–µ–Ω–∞ –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{formatted_assembly_price}</b>\n"
        )
        try:
            await callback.message.answer(
                message_text,
                reply_markup=get_confirmation_keyboard(str(cart_item_id))
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º price_assembly –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                prod_cart_id=cart_item_id,
                product_id=product_id,
                product_name=product_name,
                task_id=task_id,
                price=price,
                price_assembly=price_assembly  # –î–æ–±–∞–≤–ª—è–µ–º price_assembly
            )
            await state.set_state(CartStates.waiting_for_confirmation)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.", show_alert=True)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await CartDAO.update(
            filter_by={"id": cart_item_id},
            assembly_required=True
        )
        logger.debug("–£—Å–ª—É–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –Ω–µ-6 –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        await callback.message.answer("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–∞" –∏ "–ù–µ—Ç"
@cart_router.callback_query(F.data.startswith("cart_confirm_"), CartStates.waiting_for_confirmation)
async def process_cart_confirmation(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω process_cart_confirmation —Å callback_data: {callback.data}")
    action, prod_cart_id = callback.data.split("_")[2], callback.data.split("_")[3]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º prod_cart_id –≤ int
    try:
        prod_cart_id = int(prod_cart_id)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç prod_cart_id: {prod_cart_id}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    product_id = state_data.get('product_id')
    product_name = state_data.get('product_name')
    task_id = state_data.get('task_id')
    price = state_data.get('price')
    price_assembly = state_data.get('price_assembly', 0)  # –ò–∑–≤–ª–µ–∫–∞–µ–º price_assembly, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    data_back_cover = await planfix_basic_back_cover_cart(task_id=task_id, filter_id=104414)
    custom_fields = data_back_cover.get("directoryEntries", [{}])[0].get("customFieldData", [])
    color = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    name_operation = OPERATION_NAMES.get(6, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
    
    for field in custom_fields:
        field_id = field.get("field", {}).get("id")
        if field_id == 3892:  # ID –ø–æ–ª—è –¶–≤–µ—Ç
            color = field.get("value", {}).get("value", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        elif field_id == 3902:  # ID –ø–æ–ª—è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
            pricelist_key = field.get("value", {}).get("id", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            data_pricelist = await planfix_price_basic_back_cover(model_id=int(product_id), pricelist_key=pricelist_key)
            if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                for field_data in data_pricelist['entry']['customFieldData']:
                    price = int(field_data['value'])  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É

    formatted_price = f"{price:,.0f}".replace(',', ' ')
    confirmation_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."

    if action == "yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª—è–µ–º assembly_required=True
        await CartDAO.update(
            filter_by={"id": prod_cart_id},
            assembly_required=True
        )
        logger.info(f"–£—Å–ª—É–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: prod_cart_id={prod_cart_id}")

        message_text = (
            f"‚úÖ <b>–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>\n\n"
            f"üîπ <b>{name_operation}:</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
            f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
            f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
            f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∞: <b>{formatted_assembly_price}</b>\n"
        )

        await callback.message.delete()
        await callback.message.answer(message_text)
    elif action == "no":
        
        message_text = (
            f"‚úÖ <b>–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>\n\n"
            f"üîπ <b>{name_operation}:</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
            f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
        )

        await callback.message.delete()
        await callback.message.answer(message_text)

    await state.clear()
    await callback.answer()

@cart_router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def send_product_cart(message: Message):
    telegram_id = message.from_user.id

    product_cart = await CartDAO.find_all(telegram_id=telegram_id)

    total_quantity = sum(product.quantity for product in product_cart)
    total_price = 0
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if product_cart:
        messages_to_delete = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for idx, product in enumerate(product_cart):
            prod_cart_id = product.id
            product_id = product.product_id
            task_id = product.task_id
            name = product.product_name
            quantity = product.quantity
            operation = product.operation
            assembly_required = product.assembly_required

            # –ü—Ä–∏–≤–æ–¥–∏–º operation –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
            try:
                operation = int(operation)
            except (ValueError, TypeError):
                operation = 0

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            price = product.price or 0
            comment = ""
            name_operation = OPERATION_NAMES.get(operation, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            formatted_price = f"{price:,.0f}".replace(',', ' ')

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ 4: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Planfix
            if operation == 4:
                product_cart_data = await planfix_production_task_id(task_id=task_id)
                custom_fields = product_cart_data.get("task", {}).get("customFieldData", [])

                price = 0
                comment = ""
                for field in custom_fields:
                    field_id = field.get("field", {}).get("id")
                    if field_id == 12126:  # ID –ø–æ–ª—è Price
                        price = field.get("value") or 0
                    elif field_id == 5498:  # ID –ø–æ–ª—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                        comment = field.get("value", "")

                formatted_price = f"{price:,.0f}".replace(',', ' ')
                await CartDAO.update(filter_by={"id": prod_cart_id}, price=price)

            # –§–æ—Ä–º–∏—Ä—É–µ–º message_text –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation == 1:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                )
            elif operation == 2:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏/—Ç–∞—á–∞"
                )
            elif operation == 3:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –†–∞–∑–±–æ—Ä–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è"
                )
            elif operation == 4:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {comment or '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}"
                )
            elif operation == 5:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏"
                )
            elif operation == 6:
                data_back_cover = await planfix_basic_back_cover_cart(task_id=task_id, filter_id=104414)
                custom_fields = data_back_cover.get("directoryEntries", [{}])[0].get("customFieldData", [])
                color = "–Ω–µ —É–∫–∞–∑–∞–Ω"
                for field in custom_fields:
                    field_id = field.get("field", {}).get("id")
                    if field_id == 3892:  # ID –ø–æ–ª—è –¶–≤–µ—Ç
                        color = field.get("value", {}).get("value", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                    elif field_id == 3902:  # ID –ø–æ–ª—è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
                        pricelist_key = field.get("value", {}).get("id", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                        data_pricelist = await planfix_price_basic_back_cover(model_id=int(product_id), pricelist_key=pricelist_key)
                        if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                            for field_data in data_pricelist['entry']['customFieldData']:
                                price_back_cover = int(field_data['value'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                                formatted_price = f"{price_back_cover:,.0f}".replace(',', ' ')
                            await CartDAO.update(filter_by={"id": prod_cart_id}, price=price_back_cover)
                            price = price_back_cover

                confirmation_status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if assembly_required else "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: <b>{confirmation_status}</b>"
                )
            elif operation == 7:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–¥–∞–∂–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                )
            else:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                )

            total_price += price * quantity if assembly_required else 0  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await message.answer(
                message_text,
                reply_markup=kb.cart_aiagent_product_keyboard(product_id=product_id, prod_cart_id=prod_cart_id)
            )
            messages.append(sent_message)
            messages_to_delete.append(sent_message.message_id)

        formatted_total_price = f"{total_price:,.0f}".replace(',', ' ')
        cart_text = (
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
            f"üî¢ –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity} —à—Ç.\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {formatted_total_price} —Ä—É–±."
        )
        total_message = await message.answer(cart_text, reply_markup=kb.cart_order_keyboard())
        messages.append(total_message)
        messages_to_delete.append(total_message.message_id)

        return messages

    else:
        result = await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return [result]

# –£–î–ê–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ò–ó –°–ü–ò–°–ö–ê –ö–û–†–ó–ò–ù–´
@cart_router.callback_query(F.data.startswith('cart-aiagent-product-delete'))
async def delete_product_aiagent_cart(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[1]
    prod_cart_id = int(callback_query.data.split('_')[2])

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await CartDAO.delete(filter_by={"id": prod_cart_id})

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    telegram_id = callback_query.from_user.id
    product_cart = await CartDAO.find_all(telegram_id=telegram_id)

    total_quantity = sum(product.quantity for product in product_cart)
    total_price = 0
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if product_cart:
        for idx, product in enumerate(product_cart):
            prod_cart_id = product.id
            product_id = product.product_id
            task_id = product.task_id
            name = product.product_name
            quantity = product.quantity

            product_cart_data = await planfix_production_task_id(task_id=task_id)
            custom_fields = product_cart_data.get("task", {}).get("customFieldData", [])

            price = 0
            comment = ""
            for field in custom_fields:
                field_id = field.get("field", {}).get("id")
                if field_id == 12126:  # ID –ø–æ–ª—è Price
                    price = field.get("value") or 0
                elif field_id == 5498:  # ID –ø–æ–ª—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    comment = field.get("value", "")

            total_price += price * quantity
            formatted_price = f"{price:,.0f}".replace(',', ' ')

            message_text = (
                f"üîπ <b>{idx + 1}. –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {comment or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
            )

            sent_message = await callback_query.message.answer(
                message_text,
                reply_markup=kb.cart_aiagent_product_keyboard(product_id=product_id, prod_cart_id=prod_cart_id)
            )
            messages.append(sent_message)

        formatted_total_price = f"{total_price:,.0f}".replace(',', ' ')
        cart_text = (
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
            f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity} —à—Ç.\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {formatted_total_price} —Ä—É–±."
        )
        total_message = await callback_query.message.answer(cart_text, reply_markup=kb.cart_order_keyboard())
        messages.append(total_message)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        return messages
    else:
        result = await callback_query.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return [result]

# –û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´
@cart_router.callback_query(F.data.startswith('clear_cart'))
async def clear_cart(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await CartDAO.delete(telegram_id=telegram_id, delete_all=True)
    await callback_query.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result = await callback_query.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    return [result]