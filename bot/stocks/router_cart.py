from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.planfix import (
    planfix_production_task_id, 
    planfix_basic_back_cover_cart, 
    planfix_price_basic_back_cover, 
    planfix_price_assembly_basic_back_cover,
    planfix_price_basic_nomenclature_re_gluing, 
    planfix_basic_nomenclature_re_gluing
)
from bot.stocks.keyboards import inline_kb_cart as kb
from bot.users.keyboards import inline_kb as user_kb
from bot.stocks.dao import CartDAO
from bot.operations import OPERATION_NAMES, PLANFIX_TO_OPERATION_ID
import logging
import asyncio

from bot.stocks.handlers_back_cover import handle_back_cover_common
from bot.stocks.handlers_production import handle_production_common

cart_router = Router()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
class CartStates(StatesGroup):
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–ø—Ä–æ—Å–æ–º "–î–∞/–ù–µ—Ç"
def get_confirmation_keyboard(prod_cart_id: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data=f"cart_confirm_yes_{prod_cart_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cart_confirm_no_{prod_cart_id}")
        ]
    ])
    return keyboard

##### –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–í–¢–û–†–ù–û –ö–ù–û–ü–ö–ò -> –£–°–õ–£–ì–ò: –ü–ï–†–ï–ö–õ–ï–ô–ö–ê –î–ò–°–ü–õ–ï–Ø - 1, 2

@cart_router.callback_query(F.data.startswith("cart_search_re-gluing_"))
async def handle_re_gluing_common(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω handle_re_gluing_common —Å callback_data: {callback.data}")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏ model_name –∏–∑ callback_data
        data = callback.data.split("_")
        model_id = data[3] if len(data) > 3 else None
        model_name = data[4] if len(data) > 4 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if not model_id:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –∏ model_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(model_id=model_id, model_name=model_name)

        data_basic_nomenclature_re_gluing = await planfix_basic_nomenclature_re_gluing(model_id=model_id, filter_id=104412)

        messages = []
        
        for entry in data_basic_nomenclature_re_gluing['directoryEntries']:
            pricelist_key = None
            name_model = None
            basic_key = entry.get('key')
            
            for field_data in entry['customFieldData']:
                if field_data['field']['id'] == 3884 and field_data['field']['name'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
                    name_model = field_data['value']
                if field_data['field']['id'] == 3902 and field_data['field']['name'] == '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç':
                    pricelist_key = field_data['value'].get('id')
            
            if pricelist_key is not None and pricelist_key != 0 and name_model:
                messages.append(f"ID: {pricelist_key}, name_model: {name_model}")
                data_pricelist = await planfix_price_basic_nomenclature_re_gluing(model_id=model_id, pricelist_key=pricelist_key)

                if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                    for field_data in data_pricelist['entry']['customFieldData']:
                        if 'value' not in field_data or field_data['value'] is None:
                            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ 'value' –≤ field_data: {field_data}")
                            continue
                        
                        value = field_data['value']
                        if value != 0:
                            planfix_field_id = field_data['field']['id']
                            operation_id = PLANFIX_TO_OPERATION_ID.get(planfix_field_id)
                            if operation_id is None:
                                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Planfix field_id: {planfix_field_id}, field_data: {field_data}")
                                continue
                            
                            name_operation = OPERATION_NAMES.get(operation_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
                            pricelist_formatted = f"{int(value):,}".replace(",", " ")
                            value_re_gluing = (
                                f"üîπ <b>{name_operation}</b>\n"
                                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{basic_key}</b>\n"
                                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
                                f"üí∞ –¶–µ–Ω–∞: <b>{pricelist_formatted} —Ä—É–±.</b>"
                            )
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–æ–ª—å–∫–æ –¥–ª—è callback_data
                            callback_model_id = str(model_id)[:10]
                            callback_model_name = model_name[:15]
                            callback_data = f"re-gluing-cart_{callback_model_id}_{callback_model_name}_{operation_id}_{basic_key}_{pricelist_formatted}"
                            logger.debug(f"Callback data: {callback_data} (length: {len(callback_data.encode('utf-8'))} bytes)")
                            
                            await callback.message.answer(
                                f"{value_re_gluing}",
                                reply_markup=kb.re_gluing_cart_keyboard(
                                    model_id=callback_model_id,
                                    model_name=callback_model_name,
                                    operation=operation_id,
                                    task_id=basic_key,
                                    price=value
                                )
                            )
                            await asyncio.sleep(0.1)
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç planfix_price_basic_nomenclature_re_gluing: {data_pricelist}")
            else:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –≤—ã–∑–æ–≤ planfix_price_basic_nomenclature_re_gluing: basic_key={basic_key}, pricelist_key={pricelist_key}, name_model={name_model}")
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_re_gluing_common: {e}")
#pragma: no cover
        result = await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return result


##### –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–í–¢–û–†–ù–û –ö–ù–û–ü–ö–ò -> –£–°–õ–£–ì–ò: –ó–ê–ú–ï–ù–ê –ó–ê–î–ù–ï–ô –ö–†–´–®–ö–ò - 6

@cart_router.callback_query(F.data.startswith("cart_search_back_cover_"))
async def handle_back_cover_cart(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω handle_back_cover_cart —Å callback_data: {callback.data}")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏ model_name –∏–∑ callback_data
        data = callback.data.split("_")
        logger.debug(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback.data: {data}")
        
        if len(data) < 6:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 6 —á–∞—Å—Ç–µ–π: "cart_search_back_cover_MODELID_MODELNAME"
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return

        model_id = data[4]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è model_id
        model_name = "_".join(data[5:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ model_name –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Samsung S9")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ model_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            model_id = int(model_id)
        except ValueError:
            logger.error(f"model_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {model_id}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return

        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π model_id: {model_id}, model_name: {model_name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –∏ model_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(model_id=model_id, model_name=model_name)

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–º–µ–Ω—ã –∫—Ä—ã—à–∫–∏
        await handle_back_cover_common(callback, state)

        # # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –æ–ø—Ü–∏–π
        # await callback.message.answer(
        #     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
        #     reply_markup=user_kb.search_keyboard_with_model(model_id=model_id, model_name=model_name)
        # )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_cover_cart: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–º–µ–Ω—ã –∫—Ä—ã—à–∫–∏.")
        await callback.answer()


##### –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–í–¢–û–†–ù–û –ö–ù–û–ü–ö–ò -> –¢–û–í–ê–†–ê: –î–ò–°–ü–õ–ï–ô (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô) - 4

@cart_router.callback_query(F.data.startswith("cart_ready_products_"))
async def handle_ready_products_cart(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω handle_ready_products_cart —Å callback_data: {callback.data}")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏ model_name –∏–∑ callback_data
        data = callback.data.split("_")
        logger.debug(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback.data: {data}")
        
        if len(data) < 5:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π: "cart_ready_products_MODELID_MODELNAME"
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            result = await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return result

        model_id = data[3]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è model_id
        model_name = "_".join(data[4:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ model_name –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ model_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            model_id = int(model_id)
        except ValueError:
            logger.error(f"model_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {model_id}")
            result = await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.")
            await callback.answer()
            return result

        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π model_id: {model_id}, model_name: {model_name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –∏ model_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(model_id=model_id, model_name=model_name)

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await handle_production_common(callback, state, operation="4")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ready_products_cart: {e}")
        result = await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.")
        await callback.answer()
        return result


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò "–í –ö–û–†–ó–ò–ù–£"

@cart_router.callback_query(F.data.startswith("re-gluing-cart_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω add_to_cart —Å callback_data: {callback.data}")
    telegram_id = callback.from_user.id
    data = callback.data.split("_")
    if len(data) != 6:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
        return

    try:
        product_id = int(data[1])
        product_name = data[2]
        operation = int(data[3])
        task_id = int(data[4])
        price = int(float(data[5]))
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö callback_data: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: product_id={product_id}, product_name={product_name}, operation={operation}, task_id={task_id}, price={price}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
    state_data = await state.get_data()
    model_id = state_data.get('model_id', product_id)
    model_name = state_data.get('model_name', product_name)
    await state.update_data(model_id=model_id, model_name=model_name)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º touch_or_backlight=True –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ 2
    touch_or_backlight = True if operation == 2 else False

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item_id = await CartDAO.add(
        telegram_id=telegram_id,
        product_id=product_id,
        task_id=task_id,
        product_name=product_name,
        operation=str(operation),
        price=price,
        quantity=1,
        assembly_required=False,
        touch_or_backlight=touch_or_backlight
    )

    if not isinstance(cart_item_id, int):
        logger.error(f"CartDAO.add –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(cart_item_id)}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
        return

    if operation in (1, 2, 6):  # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
        # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π 1, 2 –∏ 6 –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        formatted_price = f"{price:,.0f}".replace(',', ' ')

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
        data_price_assembly = await planfix_price_assembly_basic_back_cover(model_id=product_id)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
        price_assembly = None
        try:
            if data_price_assembly.get("result") == "success":
                entries = data_price_assembly.get("directoryEntries", [])
                if entries and "customFieldData" in entries[0]:
                    custom_fields = entries[0]["customFieldData"]
                    for field in custom_fields:
                        if field.get("field", {}).get("id") == 3780:  # –ü–æ–ª–µ "–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏"
                            price_assembly = field.get("value")
                            break
            if price_assembly is None:
                logger.warning(f"–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data_price_assembly}")
                price_assembly = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏: {e}, –¥–∞–Ω–Ω—ã–µ: {data_price_assembly}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏.")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.", show_alert=True)
            return

        message_text = (
            f"üîπ <b>{OPERATION_NAMES.get(operation, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')}</b>\n"
            f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
            f"‚úÖ <b>–î–æ–±–∞–≤–∏—Ç—å –†–∞–∑–±–æ—Ä/–°–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>\n"
            f"üí∞ –¶–µ–Ω–∞ –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{formatted_assembly_price}</b>\n"
        )
        try:
            await callback.message.answer(
                message_text,
                reply_markup=get_confirmation_keyboard(str(cart_item_id))
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º price_assembly –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                prod_cart_id=cart_item_id,
                product_id=product_id,
                product_name=product_name,
                task_id=task_id,
                price=price,
                price_assembly=price_assembly,
                operation=operation
            )
            await state.set_state(CartStates.waiting_for_confirmation)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.", show_alert=True)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await CartDAO.update(
            filter_by={"id": cart_item_id},
            assembly_required=True
        )
        logger.debug("–£—Å–ª—É–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –Ω–µ-1, –Ω–µ-2 –∏ –Ω–µ-6 –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
            reply_markup=user_kb.search_keyboard_with_model(model_id=model_id, model_name=model_name)
        )

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–∞" –∏ "–ù–µ—Ç"
@cart_router.callback_query(F.data.startswith("cart_confirm_"), CartStates.waiting_for_confirmation)
async def process_cart_confirmation(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω process_cart_confirmation —Å callback_data: {callback.data}")
    action, prod_cart_id = callback.data.split("_")[2], callback.data.split("_")[3]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º prod_cart_id –≤ int
    try:
        prod_cart_id = int(prod_cart_id)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç prod_cart_id: {prod_cart_id}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    product_id = state_data.get('product_id')
    product_name = state_data.get('product_name')
    task_id = state_data.get('task_id')
    price = state_data.get('price')
    price_assembly = state_data.get('price_assembly', 0)
    operation = state_data.get('operation')
    model_id = state_data.get('model_id')
    model_name = state_data.get('model_name')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    color = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if operation == 6:
        data_back_cover = await planfix_basic_back_cover_cart(task_id=task_id, filter_id=104414)
        custom_fields = data_back_cover.get("directoryEntries", [{}])[0].get("customFieldData", [])
        for field in custom_fields:
            field_id = field.get("field", {}).get("id")
            if field_id == 3892:  # ID –ø–æ–ª—è –¶–≤–µ—Ç
                color = field.get("value", {}).get("value", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            elif field_id == 3902:  # ID –ø–æ–ª—è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
                pricelist_key = field.get("value", {}).get("id", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                data_pricelist = await planfix_price_basic_back_cover(model_id=int(product_id), pricelist_key=pricelist_key)
                if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                    for field_data in data_pricelist['entry']['customFieldData']:
                        price = int(field_data['value'])  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É

    formatted_price = f"{price:,.0f}".replace(',', ' ')
    confirmation_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."
    name_operation = OPERATION_NAMES.get(operation, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

    if action == "yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª—è–µ–º assembly_required=True
        await CartDAO.update(
            filter_by={"id": prod_cart_id},
            assembly_required=True
        )
        logger.info(f"–£—Å–ª—É–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: prod_cart_id={prod_cart_id}")

        if operation == 6:
            message_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
                f"üîπ <b>{name_operation}:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
                f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
                f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
                f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∫–∏: <b>{formatted_assembly_price}</b>\n"
            )
        else:  # operation == 1 –∏–ª–∏ operation == 2
            message_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
                f"üîπ <b>{name_operation}:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
                f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
                f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∫–∏: <b>{formatted_assembly_price}</b>\n"
            )

        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        await callback.message.answer(message_text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
            reply_markup=user_kb.search_keyboard_with_model(model_id=model_id, model_name=model_name)
        )
    elif action == "no":
        if operation == 6:
            message_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
                f"üîπ <b>{name_operation}:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
                f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
            )
        else:  # operation == 1 –∏–ª–∏ operation == 2
            message_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
                f"üîπ <b>{name_operation}:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{product_name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
            )

        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        await callback.message.answer(message_text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
            reply_markup=user_kb.search_keyboard_with_model(model_id=model_id, model_name=model_name)
        )

    await state.clear()
    await callback.answer()


###################### –°–ü–ò–°–û–ö –ü–û–ó–ò–¶–ò–ô –ö–û–†–ó–ò–ù–´ ####################

@cart_router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def send_product_cart(message: Message):
    telegram_id = message.from_user.id

    product_cart = await CartDAO.find_all(telegram_id=telegram_id)

    total_quantity = sum(product.quantity for product in product_cart)
    total_price = 0
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if product_cart:
        messages_to_delete = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for idx, product in enumerate(product_cart):
            prod_cart_id = product.id
            product_id = product.product_id
            task_id = product.task_id
            name = product.product_name
            quantity = product.quantity
            operation = product.operation
            assembly_required = product.assembly_required
            touch_or_backlight = product.touch_or_backlight

            # –ü—Ä–∏–≤–æ–¥–∏–º operation –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
            try:
                operation = int(operation)
            except (ValueError, TypeError):
                operation = 0

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            price = product.price or 0
            comment = ""
            name_operation = OPERATION_NAMES.get(operation, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            formatted_price = f"{price:,.0f}".replace(',', ' ')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º price_assembly –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π 1, 2 –∏ 6
            price_assembly = 0
            if operation in (1, 2, 6):  # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–±–æ—Ä–∫–æ–π/—Å–±–æ—Ä–∫–æ–π
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏
                data_price_assembly = await planfix_price_assembly_basic_back_cover(model_id=product_id)
                try:
                    if data_price_assembly.get("result") == "success":
                        entries = data_price_assembly.get("directoryEntries", [])
                        if entries and "customFieldData" in entries[0]:
                            custom_fields = entries[0]["customFieldData"]
                            for field in custom_fields:
                                if field.get("field", {}).get("id") == 3780:  # –ü–æ–ª–µ "–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏"
                                    price_assembly = field.get("value")
                                    break
                    if price_assembly is None:
                        logger.warning(f"–¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data_price_assembly}")
                        price_assembly = 0
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–∑–±–æ—Ä–∫–∏/—Å–±–æ—Ä–∫–∏: {e}, –¥–∞–Ω–Ω—ã–µ: {data_price_assembly}")
                    price_assembly = 0

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ 4: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Planfix
            if operation == 4:
                product_cart_data = await planfix_production_task_id(task_id=task_id)
                custom_fields = product_cart_data.get("task", {}).get("customFieldData", [])

                price = 0
                comment = ""
                for field in custom_fields:
                    field_id = field.get("field", {}).get("id")
                    if field_id == 12126:  # ID –ø–æ–ª—è Price
                        price = field.get("value") or 0
                    elif field_id == 5498:  # ID –ø–æ–ª—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                        comment = field.get("value", "")

                formatted_price = f"{price:,.0f}".replace(',', ' ')
                await CartDAO.update(filter_by={"id": prod_cart_id}, price=price)

            # –§–æ—Ä–º–∏—Ä—É–µ–º message_text –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation == 1:
                confirmation_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."
                if assembly_required:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                        f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∫–∏: <b>{formatted_assembly_price}</b>\n"
                    )
                else:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    )
            elif operation == 2:
                confirmation_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."
                if assembly_required:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏/—Ç–∞—á–∞\n\n"
                        f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∫–∏: <b>{formatted_assembly_price}</b>\n"
                    )
                else:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏/—Ç–∞—á–∞"
                    )
            elif operation == 3:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –†–∞–∑–±–æ—Ä–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è"
                )
            elif operation == 4:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {comment or '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}"
                )
            elif operation == 5:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏"
                )
            elif operation == 6:
                data_back_cover = await planfix_basic_back_cover_cart(task_id=task_id, filter_id=104414)
                custom_fields = data_back_cover.get("directoryEntries", [{}])[0].get("customFieldData", [])
                color = "–Ω–µ —É–∫–∞–∑–∞–Ω"
                for field in custom_fields:
                    field_id = field.get("field", {}).get("id")
                    if field_id == 3892:  # ID –ø–æ–ª—è –¶–≤–µ—Ç
                        color = field.get("value", {}).get("value", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                    elif field_id == 3902:  # ID –ø–æ–ª—è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
                        pricelist_key = field.get("value", {}).get("id", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                        data_pricelist = await planfix_price_basic_back_cover(model_id=int(product_id), pricelist_key=pricelist_key)
                        if data_pricelist.get('result') == 'success' and 'entry' in data_pricelist:
                            for field_data in data_pricelist['entry']['customFieldData']:
                                price_back_cover = int(field_data['value'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                                formatted_price = f"{price_back_cover:,.0f}".replace(',', ' ')
                            await CartDAO.update(filter_by={"id": prod_cart_id}, price=price_back_cover)
                            price = price_back_cover

                confirmation_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                formatted_assembly_price = f"{int(price_assembly):,.0f}".replace(',', ' ') + " —Ä—É–±."

                if assembly_required:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n\n"
                        f"üìù –†–∞–∑–±–æ—Ä/–°–±–æ—Ä: <b>{confirmation_status}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞ —Ä–∞–∑–±–æ—Ä–∞/—Å–±–æ—Ä–∫–∏: <b>{formatted_assembly_price}</b>\n"
                    )
                else:
                    message_text = (
                        f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                        f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                        f"üé® –¶–≤–µ—Ç: <b>{color}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    )
            elif operation == 7:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–¥–∞–∂–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {touch_or_backlight}"
                )
            else:
                message_text = (
                    f"üîπ <b>{idx + 1}. {name_operation}:</b>\n"
                    f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                    f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                )

            # –£—á–∏—Ç—ã–≤–∞–µ–º price –∏ price_assembly –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation in (1, 2, 6):  # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–±–æ—Ä–∫–æ–π/—Å–±–æ—Ä–∫–æ–π
                # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π 1, 2 –∏ 6: –µ—Å–ª–∏ assembly_required == True, –¥–æ–±–∞–≤–ª—è–µ–º price + price_assembly, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ price
                if assembly_required:
                    total_price += (price + int(price_assembly)) * quantity
                else:
                    total_price += price * quantity
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ price
                total_price += price * quantity

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await message.answer(
                message_text,
                reply_markup=kb.cart_aiagent_product_keyboard(product_id=product_id, prod_cart_id=prod_cart_id)
            )
            messages.append(sent_message)
            messages_to_delete.append(sent_message.message_id)

        formatted_total_price = f"{total_price:,.0f}".replace(',', ' ')
        cart_text = (
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
            f"üî¢ –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity} —à—Ç.\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {formatted_total_price} —Ä—É–±."
        )
        total_message = await message.answer(cart_text, reply_markup=kb.cart_order_keyboard())
        messages.append(total_message)
        messages_to_delete.append(total_message.message_id)

        return messages

    else:
        result = await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return [result]

# –£–î–ê–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ò–ó –°–ü–ò–°–ö–ê –ö–û–†–ó–ò–ù–´
@cart_router.callback_query(F.data.startswith('cart-aiagent-product-delete'))
async def delete_product_aiagent_cart(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[1]
    prod_cart_id = int(callback_query.data.split('_')[2])

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await CartDAO.delete(filter_by={"id": prod_cart_id})

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    telegram_id = callback_query.from_user.id
    product_cart = await CartDAO.find_all(telegram_id=telegram_id)

    total_quantity = sum(product.quantity for product in product_cart)
    total_price = 0
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if product_cart:
        for idx, product in enumerate(product_cart):
            prod_cart_id = product.id
            product_id = product.product_id
            task_id = product.task_id
            name = product.product_name
            quantity = product.quantity

            product_cart_data = await planfix_production_task_id(task_id=task_id)
            custom_fields = product_cart_data.get("task", {}).get("customFieldData", [])

            price = 0
            comment = ""
            for field in custom_fields:
                field_id = field.get("field", {}).get("id")
                if field_id == 12126:  # ID –ø–æ–ª—è Price
                    price = field.get("value") or 0
                elif field_id == 5498:  # ID –ø–æ–ª—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    comment = field.get("value", "")

            total_price += price * quantity
            formatted_price = f"{price:,.0f}".replace(',', ' ')

            message_text = (
                f"üîπ <b>{idx + 1}. –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:</b>\n"
                f"üìå –ê—Ä—Ç–∏–∫—É–ª: <b>{task_id}</b>\n"
                f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: <b>{name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{formatted_price} —Ä—É–±.</b>\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {comment or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
            )

            sent_message = await callback_query.message.answer(
                message_text,
                reply_markup=kb.cart_aiagent_product_keyboard(product_id=product_id, prod_cart_id=prod_cart_id)
            )
            messages.append(sent_message)

        formatted_total_price = f"{total_price:,.0f}".replace(',', ' ')
        cart_text = (
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
            f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity} —à—Ç.\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {formatted_total_price} —Ä—É–±."
        )
        total_message = await callback_query.message.answer(cart_text, reply_markup=kb.cart_order_keyboard())
        messages.append(total_message)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        return messages
    else:
        result = await callback_query.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return [result]

# –û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´
@cart_router.callback_query(F.data.startswith('clear_cart'))
async def clear_cart(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await CartDAO.delete(telegram_id=telegram_id, delete_all=True)
    await callback_query.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result = await callback_query.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    return [result]