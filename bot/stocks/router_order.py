from aiogram import Router, F, types

from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# from bot.planfix import planfix_stock_balance, planfix_create_order, planfix_create_order_prodaction_4
from bot import planfix_order as pf_order
from bot.users.keyboards import inline_kb as kb
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.users.keyboards import markup_kb
from bot.stocks.dao import CartDAO, OrderDAO, OrderItemDAO, OrderStatusHistoryDAO
from bot.users.dao import UserDAO
from bot.stocks.models_order import OrderStatus
import re
from loguru import logger
from sqlalchemy import inspect
from bot.database import async_session_maker
from bot.operations import OPERATION_NAMES

order_router = Router()

@order_router.message(F.text == 'üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def send_orders(message: Message):
    telegram_id = message.from_user.id
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    try:
        my_orders = await OrderDAO.find_all(telegram_id=telegram_id)
 
        if not my_orders:
            result = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            messages.append(result)
            return messages

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(my_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è telegram_id={telegram_id}")

        for order in my_orders:
            status_history = await OrderStatusHistoryDAO.find_all(order_id=order.id)
            if status_history:
                last_status = sorted(status_history, key=lambda x: x.timestamp, reverse=True)[0].status
            else:
                last_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            order_total_amount = order.total_amount
            order_items = order.items

            grouped_items = {}
            for item in order_items:
                operation_id = int(item.operation) if isinstance(item.operation, (int, str)) and str(item.operation).isdigit() else item.operation
                operation_name = OPERATION_NAMES.get(operation_id, f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id}")
                if operation_name not in grouped_items:
                    grouped_items[operation_name] = []
                grouped_items[operation_name].append(f"   üîπ {item.product_name} üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.")

            items_text = "\n".join([
                f"üìå <b>{operation}:</b>\n" + "\n".join(items)
                for operation, items in grouped_items.items()
            ]) if order_items else "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

            message_text = (
                f"üè∑Ô∏è –ó–∞–∫–∞–∑ #{order.id}\n"
                f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {last_status}\n"
                f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {order_total_amount} —Ä—É–±.\n"
                f"üìù –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}"
            )

            order_message = await message.answer(message_text)
            messages.append(order_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è telegram_id={telegram_id}: {e}")
        error_message = await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        messages.append(error_message)

    return messages

############################# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó –∏ –û–ü–ï–†–ê–¶–ò–ô #################################

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    confirm_phone = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º
async def create_order_and_sync_with_planfix(telegram_id: int, phone_number: str, message_obj, state: FSMContext):
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        # –ü–æ–ª—É—á–∞–µ–º items –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await CartDAO.find_all(telegram_id=telegram_id)
        if not cart_items:
            error_message = await message_obj.answer(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                reply_markup=markup_kb.back_keyboard(telegram_id)
            )
            await state.clear()
            return [error_message]

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ id
        order_id = await OrderDAO.add(
            telegram_id=telegram_id,
            total_amount=0
        )

        # –î–æ–±–∞–≤–ª—è–µ–º items –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        total_amount = 0
        order_item_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö OrderItem
        for cart_item in cart_items:
            order_item_id = await OrderItemDAO.add(
                order_id=order_id,
                product_id=cart_item.product_id,
                product_name=cart_item.product_name,
                quantity=cart_item.quantity,
                price=cart_item.price,
                task_id=cart_item.task_id,
                operation=cart_item.operation,
                touch_or_backlight=cart_item.touch_or_backlight,
                photo_file_ids=cart_item.photo_file_ids,
                assembly_required=cart_item.assembly_required
            )
            order_item_ids.append(order_item_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —ç–ª–µ–º–µ–Ω—Ç–∞
            total_amount += cart_item.price * cart_item.quantity

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        await OrderDAO.update(
            {"id": order_id},
            total_amount=total_amount
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status_record = await OrderStatusHistoryDAO.add(
            order_id=order_id,
            status=OrderStatus.PENDING.value,
            comment="Order created"
        )
        status = status_record["status"]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        order = await OrderDAO.find_one_or_none(id=order_id)
        order_items = await OrderItemDAO.find_all(order_id=order_id)

        # # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        # await CartDAO.delete(telegram_id=telegram_id, delete_all=True)
        # logger.info("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∏ —Å—Ä–∞–∑—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å Planfix
        grouped_items = {}
        for idx, item in enumerate(order_items):
            operation_id = int(item.operation) if isinstance(item.operation, (int, str)) and str(item.operation).isdigit() else 0
            operation_name = OPERATION_NAMES.get(operation_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {operation_id}")
            # touch_or_backlight = item.touch_or_backlight

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ç—Ä–æ–∫—É —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation_id == 1:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                )
            elif operation_id == 2:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏/—Ç–∞—á–∞"
                )
            elif operation_id == 3:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –†–∞–∑–±–æ—Ä–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è"
                )
            elif operation_id == 4:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ cart_items
                comment = getattr(cart_items[idx], 'comment', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {comment}"
                )
            elif operation_id == 5:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏"
                )
            elif operation_id == 6:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞–º–µ–Ω–∞ –∑–∞–¥–Ω–µ–π –∫—Ä—ã—à–∫–∏"
                )
            elif operation_id == 7:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫"
                )
            else:
                item_text = (
                    f"   üîπ {item.product_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.\n"
                    f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation_name not in grouped_items:
                grouped_items[operation_name] = []
            grouped_items[operation_name].append((idx, item_text))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
        items_text = "\n".join([
            f"üìå <b>{operation}:</b>\n" + "\n".join([item for idx, item in items])
            for operation, items in grouped_items.items()
        ]) if order_items else "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –§–æ—Ä–º–∏—Ä—É–µ–º description –¥–ª—è –ü–ª–∞–Ω—Ñ–∏–∫—Å–∞
        description = (
            f"üè∑Ô∏è –ó–∞–∫–∞–∑ #{order_id}\n"
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.\n"
            f"üìù –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Å—Ç–∞–≤–æ–º –∑–∞–∫–∞–∑–∞
        message_text = (
            f"üè∑Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Ä—É–±.\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
            f"üìù –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message_text}")
        order_message = await message_obj.answer(
            message_text,
            reply_markup=markup_kb.back_keyboard(telegram_id)
        )
        messages.append(order_message)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º
        logger.info("–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º")

        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∑–∞–∫–∞–∑ –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å–µ
        data_order = await pf_order.planfix_create_order(description=description, order_id=order_id)
        order_pf_id = data_order['id']
        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å–µ: {order_pf_id}")
        planfix_message = await message_obj.answer(f"–ó–∞–∫–∞–∑ –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å–µ —Å–æ–∑–¥–∞–Ω: {order_pf_id}")
        messages.append(planfix_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å order_pf_id
        await OrderDAO.update(
            {"id": order_id},
            order_pf_id=order_pf_id
        )
        logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω —Å order_pf_id={order_pf_id}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        for operation_name, items in grouped_items.items():
            operation_id = None
            for idx, _ in items:
                item_operation_id = int(order_items[idx].operation) if isinstance(order_items[idx].operation, (int, str)) and str(order_items[idx].operation).isdigit() else 0
                operation_id = item_operation_id
                cart_item = cart_items[idx]
                prodaction_pf_id = cart_item.task_id
                order_item_id = order_item_ids[idx]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∏–∑ OrderItem
                price = cart_item.price
                quantity = cart_item.quantity
                touch_or_backlight = cart_item.touch_or_backlight

                touch_or_backlight = bool(touch_or_backlight)
                touch_or_backlight = 1 if touch_or_backlight is False else 2

                # –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                if operation_id == 1 or operation_id == 2:
                    data_prodaction = await pf_order.planfix_create_order_re_gluing_1(
                        order_pf_id=order_pf_id,
                        re_gluing_pf_id=prodaction_pf_id,
                        price=price,
                        order_item_id=order_item_id,
                        touch_or_backlight=touch_or_backlight
                    )
                elif operation_id == 4:
                    data_prodaction = await pf_order.planfix_create_order_prodaction_4(
                        order_pf_id=order_pf_id,
                        prodaction_pf_id=prodaction_pf_id,
                        price=price,
                        order_item_id=order_item_id
                    )
                elif operation_id == 5:
                    data_prodaction = await pf_order.planfix_create_order_spare_parts_5(
                        order_pf_id=order_pf_id,
                        spare_parts_pf_id=prodaction_pf_id,
                        price=price,
                        quantity=quantity,
                        order_item_id=order_item_id
                    )
                elif operation_id == 6:
                    data_prodaction = await pf_order.planfix_create_order_back_cover_6(
                        order_pf_id=order_pf_id,
                        back_cover_pf_id=prodaction_pf_id,
                        price=price,
                        order_item_id=order_item_id
                    )
                elif operation_id == 7:
                    data_prodaction = await pf_order.planfix_create_order_crash_display_7(
                        order_pf_id=order_pf_id,
                        crash_display_pf_id=prodaction_pf_id,
                        price=price,
                        quantity=quantity,
                        touch_or_backlight=touch_or_backlight,
                        order_item_id=order_item_id
                    )
                else:
                    data_prodaction = {'id': f'unknown_operation_prodaction_{operation_id}'}

                logger.info(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å (–æ–ø–µ—Ä–∞—Ü–∏—è {operation_name}): {data_prodaction}")
                product_message = await message_obj.answer(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ü–ª–∞–Ω—Ñ–∏–∫—Å (–æ–ø–µ—Ä–∞—Ü–∏—è {operation_name}): {data_prodaction}")
                messages.append(product_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º –¥–ª—è telegram_id={telegram_id}: {e}")
        error_message = await message_obj.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=markup_kb.back_keyboard(telegram_id)
        )
        await state.clear()
        return [error_message]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info("–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return messages


#######################  –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó ############################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@order_router.callback_query(F.data.startswith('place_order'))
async def request_phone_before_order(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await CartDAO.find_all(telegram_id=telegram_id)
    if not cart_items:
        result = await callback_query.message.answer(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=markup_kb.back_keyboard(telegram_id)
        )
        return result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_info = await UserDAO.find_one_or_none(telegram_id=telegram_id)
    if user_info and user_info.phone_number:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –æ–Ω –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        phone_number = user_info.phone_number
        await state.update_data(phone_number=phone_number)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data="confirm_phone_yes"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_phone_no")
            ]
        ])
        result = await callback_query.message.answer(
            f"–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?",
            reply_markup=keyboard
        )
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OrderStates.confirm_phone –¥–ª—è telegram_id={telegram_id}")
        await state.set_state(OrderStates.confirm_phone)
        await callback_query.answer()
        return result
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        result = await callback_query.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OrderStates.waiting_for_phone –¥–ª—è telegram_id={telegram_id}")
        await state.set_state(OrderStates.waiting_for_phone)
        await callback_query.answer()
        return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@order_router.callback_query(F.data.startswith('confirm_phone'), OrderStates.confirm_phone)
async def process_phone_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–í—ã–∑–≤–∞–Ω process_phone_confirmation –¥–ª—è callback_data={callback_query.data}")
    confirmation = callback_query.data.split('_')[-1]  # "yes" –∏–ª–∏ "no"

    if confirmation == "yes":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        phone_number = data.get("phone_number")
        telegram_id = callback_query.from_user.id

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º
        result = await create_order_and_sync_with_planfix(
            telegram_id=telegram_id,
            phone_number=phone_number,
            message_obj=callback_query.message,
            state=state
        )
        await callback_query.answer()
        return result

    elif confirmation == "no":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π
        result = await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        await state.set_state(OrderStates.waiting_for_phone)
        await callback_query.answer()
        return result

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@order_router.message(OrderStates.waiting_for_phone)
async def process_manual_phone_input(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    phone_pattern = r'^(\+7|8)\d{10}$'  # –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    if not re.match(phone_pattern, phone_number):
        result = await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        return result

    telegram_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_info = await UserDAO.find_one_or_none(telegram_id=telegram_id)

        if user_info:
            await UserDAO.update(
                {"telegram_id": telegram_id},
                phone_number=phone_number
            )
        else:
            await UserDAO.add(
                telegram_id=telegram_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                phone_number=phone_number
            )

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ü–ª–∞–Ω—Ñ–∏–∫—Å–æ–º
        result = await create_order_and_sync_with_planfix(
            telegram_id=telegram_id,
            phone_number=phone_number,
            message_obj=message,
            state=state
        )
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è telegram_id={telegram_id}: {e}")
        error_message = await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=markup_kb.back_keyboard(telegram_id)
        )
        await state.clear()
        return error_message

