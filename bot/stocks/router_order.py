from aiogram import Router, F, types

from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.planfix import planfix_stock_balance
from bot.users.keyboards import inline_kb as kb
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.users.keyboards import markup_kb
from bot.stocks.dao import CartDAO, OrderDAO, OrderItemDAO, OrderStatusHistoryDAO
from bot.users.dao import UserDAO
from bot.stocks.models_order import OrderStatus
import re
from loguru import logger
from sqlalchemy import inspect
from bot.database import async_session_maker


order_router = Router()


@order_router.message(F.text == 'üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def send_orders(message: Message):
    telegram_id = message.from_user.id

    try:
        my_orders = await OrderDAO.find_all(telegram_id=telegram_id)
 
        if not my_orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(my_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è telegram_id={telegram_id}")

        operation_names = {
            1: "–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ –¥–∏—Å–ø–ª–µ—è",
            2: "–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ –∑–∞–¥–Ω–µ–π –∫—Ä—ã—à–∫–∏",
            3: "–ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫",
            4: "–ö—É–ø–∏—Ç—å –¥–∏—Å–ø–ª–µ–π (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)",
            5: "–ö—É–ø–∏—Ç—å –¥–∏—Å–ø–ª–µ–π (–∑–∞–ø—á–∞—Å—Ç—å)"
        }

        for order in my_orders:
            status_history = await OrderStatusHistoryDAO.find_all(order_id=order.id)
            if status_history:
                last_status = sorted(status_history, key=lambda x: x.timestamp, reverse=True)[0].status
            else:
                last_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            order_total_amount = order.total_amount
            order_items = order.items

            grouped_items = {}
            for item in order_items:
                operation_id = int(item.operation) if isinstance(item.operation, (int, str)) and str(item.operation).isdigit() else item.operation
                operation_name = operation_names.get(operation_id, f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id}")
                if operation_name not in grouped_items:
                    grouped_items[operation_name] = []
                grouped_items[operation_name].append(f"   üîπ {item.product_name} üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.")

            items_text = "\n".join([
                f"üìå <b>{operation}:</b>\n" + "\n".join(items)
                for operation, items in grouped_items.items()
            ]) if order_items else "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

            message_text = (
                f"üè∑Ô∏è –ó–∞–∫–∞–∑ #{order.id}\n"
                f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {last_status}\n"
                f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {order_total_amount} —Ä—É–±.\n"
                f"üìù –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}"
            )

            await message.answer(message_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è telegram_id={telegram_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


############################# –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó (NEW) #################################

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    confirm_phone = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@order_router.callback_query(F.data.startswith('place_order'))
async def request_phone_before_order(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await CartDAO.find_all(telegram_id=telegram_id)
    if not cart_items:
        await callback_query.message.answer(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=markup_kb.back_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_info = await UserDAO.find_one_or_none(telegram_id=telegram_id)
    if user_info and user_info.phone_number:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –æ–Ω –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        phone_number = user_info.phone_number
        await state.update_data(phone_number=phone_number)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ FSMContext
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="confirm_phone_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_phone_no")
        ]  # –û–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ ‚Äî –∑–Ω–∞—á–∏—Ç, –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    ])
        await callback_query.message.answer(
            f"–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?",
            reply_markup=keyboard
        )
        await state.set_state(OrderStates.confirm_phone)
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        await callback_query.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        await state.set_state(OrderStates.waiting_for_phone)

    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@order_router.callback_query(F.data.startswith('confirm_phone'), OrderStates.confirm_phone)
async def process_phone_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    confirmation = callback_query.data.split('_')[-1]  # "yes" –∏–ª–∏ "no"

    if confirmation == "yes":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        phone_number = data.get("phone_number")

        telegram_id = callback_query.from_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º items –∫–æ—Ä–∑–∏–Ω—ã
            cart_items = await CartDAO.find_all(telegram_id=telegram_id)
            if not cart_items:
                await callback_query.message.answer(
                    "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                    reply_markup=markup_kb.back_keyboard()
                )
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ id
            order_id = await OrderDAO.add(
                telegram_id=telegram_id,
                total_amount=0  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 0, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
            )

            # –î–æ–±–∞–≤–ª—è–µ–º items –∑–∞–∫–∞–∑–∞
            total_amount = 0
            for cart_item in cart_items:
                await OrderItemDAO.add(
                    order_id=order_id,
                    product_id=cart_item.product_id,
                    product_name=cart_item.product_name,
                    quantity=cart_item.quantity,
                    price=cart_item.price,
                    task_id=cart_item.task_id,
                    operation=cart_item.operation
                )
                total_amount += cart_item.price * cart_item.quantity

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
            await OrderDAO.update(
                {"id": order_id},
                total_amount=total_amount
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
            status_record = await OrderStatusHistoryDAO.add(
                order_id=order_id,
                status=OrderStatus.PENDING.value,
                comment="Order created"
            )
            status = status_record["status"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            await CartDAO.delete(telegram_id=telegram_id, delete_all=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            message_text = (
                f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Ä—É–±.\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.answer(
                message_text,
                reply_markup=markup_kb.back_keyboard()
            )

            # # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            # await callback_query.message.answer(
            #     f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            #     reply_markup=markup_kb.back_keyboard()
            # )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è telegram_id={telegram_id}: {e}")
            await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=markup_kb.back_keyboard()
            )
            await state.clear()
            return

    elif confirmation == "no":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        await state.set_state(OrderStates.waiting_for_phone)

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@order_router.message(OrderStates.waiting_for_phone)
async def process_manual_phone_input(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    phone_pattern = r'^(\+7|8)\d{10}$'  # –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    if not re.match(phone_pattern, phone_number):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:"
        )
        return

    telegram_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_info = await UserDAO.find_one_or_none(telegram_id=telegram_id)

        if user_info:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await UserDAO.update(
                {"telegram_id": telegram_id},
                phone_number=phone_number
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await UserDAO.add(
                telegram_id=telegram_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                phone_number=phone_number
            )

        # –ü–æ–ª—É—á–∞–µ–º items –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await CartDAO.find_all(telegram_id=telegram_id)
        if not cart_items:
            await message.answer(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                reply_markup=markup_kb.back_keyboard()
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ id
        order_id = await OrderDAO.add(
            telegram_id=telegram_id,
            total_amount=0  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 0, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        )

        # –î–æ–±–∞–≤–ª—è–µ–º items –∑–∞–∫–∞–∑–∞
        total_amount = 0
        for cart_item in cart_items:
            await OrderItemDAO.add(
                order_id=order_id,
                product_id=cart_item.product_id,
                product_name=cart_item.product_name,
                quantity=cart_item.quantity,
                price=cart_item.price,
                task_id=cart_item.task_id,
                operation=cart_item.operation
            )
            total_amount += cart_item.price * cart_item.quantity

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        await OrderDAO.update(
            {"id": order_id},
            total_amount=total_amount
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        status_record = await OrderStatusHistoryDAO.add(
            order_id=order_id,
            status=OrderStatus.PENDING.value,
            comment="Order created"
        )
        status = status_record["status"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await CartDAO.delete(telegram_id=telegram_id, delete_all=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        message_text = (
            f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Ä—É–±.\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            message_text,
            reply_markup=markup_kb.back_keyboard()
        )

        # # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        # await message.answer(
        #     f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
        #     reply_markup=markup_kb.back_keyboard()
        # )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è telegram_id={telegram_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=markup_kb.back_keyboard()
        )
        await state.clear()
        return


############################# –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó (OLD) #################################


# @order_router.callback_query(F.data.startswith('place_order'))

# async def create_order_from_cart(callback_query: CallbackQuery):
#     telegram_id = callback_query.from_user.id

#     async with async_session_maker() as session:

#         # –ü–æ–ª—É—á–∞–µ–º items –∫–æ—Ä–∑–∏–Ω—ã
#         cart_items = await CartDAO.find_all(telegram_id=telegram_id)
#         if not cart_items:
#             await callback_query.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
#             return

#         # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
#         order = await OrderDAO.add(
#             session=session,
#             telegram_id=telegram_id,
#             total_amount=0  # –û–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
#         )

#         # –î–æ–±–∞–≤–ª—è–µ–º items –∑–∞–∫–∞–∑–∞
#         total_amount = 0
#         for cart_item in cart_items:
#             order_item = await OrderItemDAO.add(
#                 session=session,
#                 order_id=order.id,
#                 product_id=cart_item.product_id,
#                 product_name=cart_item.product_name,
#                 quantity=cart_item.quantity,
#                 price=cart_item.price
#             )
#             total_amount += cart_item.price * cart_item.quantity

#         # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
#         order.total_amount = total_amount

#         # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
#         status_record = await OrderStatusHistoryDAO.add(
#             session=session,
#             order_id=order.id,  # –î–æ–±–∞–≤–ª—è–µ–º order_id
#             status=OrderStatus.PENDING.value,
#             comment="Order created"
#         )

#         # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
#         # await session.commit()

#         await callback_query.answer('–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω')

#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
#         message_text = (
#             f"–ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
#             f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_amount} —Ä—É–±.\n"
#             f"–°—Ç–∞—Ç—É—Å: {status_record.status}"
#         )
#         await callback_query.message.answer(message_text)

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
#         await session.commit()

#     # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
#     await CartDAO.delete(telegram_id=telegram_id, delete_all=True)


# ############################# –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£ #################################


# @order_router.callback_query(F.data.startswith('clear_cart'))
# async def clear_cart(callback_query: CallbackQuery):
#     telegram_id = callback_query.from_user.id
#     await CartDAO.delete(telegram_id=telegram_id, delete_all=True)
#     await callback_query.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.')
