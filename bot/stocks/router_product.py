from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.planfix import planfix_stock_balance
from bot.users.keyboards import inline_kb as kb
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO


product_router = Router()


################ PRODUCT CATALOG #######################

@product_router.message(F.text == 'üìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–∞')
async def stockbalance(message: Message):
    await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.device_brand_keyboard())


@product_router.callback_query(F.data.startswith('device_select'))
async def handle_device_select(callback_query: CallbackQuery):
    await callback_query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=kb.device_keyboard())
    await callback_query.answer()


@product_router.callback_query(F.data.startswith('device_back'))
async def handle_device_back(callback_query: CallbackQuery):
    await callback_query.message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.device_brand_keyboard())
    await callback_query.answer()


@product_router.callback_query(F.data.startswith('device_'))
async def handle_device_choice(callback_query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ callback_data
    choice = callback_query.data.split('device_')[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    product_data = await planfix_stock_balance()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    filtered_data = [item for item in product_data if item[4] == choice]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    paginated_data = filtered_data[(page - 1) * page_size: page * page_size]

    if paginated_data:
        for idx, item in enumerate(paginated_data):
            message = f"{(page - 1) * page_size + idx + 1}. {item[1]} | –û—Å—Ç–∞—Ç–æ–∫: {item[2]} —à—Ç. | –¶–µ–Ω–∞: {item[3]} —Ä—É–±.\n"
            product_id = item[0]
            await callback_query.message.answer(
                message, reply_markup=kb.product_keyboard(product_id)
            )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â—ë"
        if len(filtered_data) > page * page_size:
            total_idx = len(filtered_data)
            await callback_query.message.answer(
                f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_idx} —à—Ç. –ù–∞–∂–º–∏—Ç–µ '–ï—â—ë' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ï—â—ë", callback_data=f"paginate_{page + 1}_{choice}")]
                ])
            )
    else:
        await callback_query.message.answer(f"–¢–æ–≤–∞—Ä—ã –¥–ª—è {choice} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë"
@product_router.callback_query(F.data.startswith('paginate_'))
async def handle_pagination(callback_query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ callback_data
    _, page, choice = callback_query.data.split('_')
    page = int(page)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    product_data = await planfix_stock_balance()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    filtered_data = [item for item in product_data if item[4] == choice]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    paginated_data = filtered_data[(page - 1) * page_size: page * page_size]

    if paginated_data:
        for idx, item in enumerate(paginated_data):
            message = f"{(page - 1) * page_size + idx + 1}. {item[1]} | –û—Å—Ç–∞—Ç–æ–∫: {item[2]} —à—Ç. | –¶–µ–Ω–∞: {item[3]} —Ä—É–±.\n"
            product_id = item[0]

            await callback_query.message.answer(
                message, reply_markup=kb.product_keyboard(product_id)
            )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â—ë"
        if len(filtered_data) > page * page_size:
            total_idx = len(filtered_data)
            await callback_query.message.answer(
                f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_idx} —à—Ç. –ù–∞–∂–º–∏—Ç–µ '–ï—â—ë' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ï—â—ë", callback_data=f"paginate_{page + 1}_{choice}")]
                ])
            )
    else:
        await callback_query.message.answer("–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")

    await callback_query.answer()


###################### –ö–û–†–ó–ò–ù–ê ############################

@product_router.callback_query(F.data.startswith('product-cart_'))
async def add_product_cart(callback_query: types.CallbackQuery):

    product_id = callback_query.data.split('_')[1]
    telegram_id = callback_query.from_user.id

    product_cart = await CartDAO.find_one_or_none(product_id=product_id, telegram_id=telegram_id)

    if not product_cart:

        product_data = await planfix_stock_balance()
        product_name = next((item[1] for item in product_data if item[0] == int(
            product_id)), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")

        await CartDAO.add(
            telegram_id=telegram_id,
            product_id=product_id,
            product_name=product_name,
            quantity=1,
            price=1000
        )
        await callback_query.answer(f'–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
    else:
        prod_cart_id = product_cart.id
        prod_cart_name = product_cart.product_name
        prod_cart_quantity = int(product_cart.quantity)
        await CartDAO.update(filter_by={'id': prod_cart_id}, quantity=prod_cart_quantity + 1)
        await callback_query.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {prod_cart_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {prod_cart_quantity + 1} —à—Ç.')
    await callback_query.answer()


###################### –ö–ê–¢–ê–õ–û–ì: –ë–†–ï–ù–î ############################

@product_router.callback_query(F.data.startswith('brand_select'))
async def handle_brand_select(callback_query: CallbackQuery):
    await callback_query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:', reply_markup=kb.brand_keyboard())
    await callback_query.answer(' ')


@product_router.callback_query(F.data.startswith('brand_back'))
async def handle_brand_back(callback_query: CallbackQuery):
    await callback_query.message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.device_brand_keyboard())
    await callback_query.answer(' ')
