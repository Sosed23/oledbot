from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.planfix import planfix_stock_balance_models, planfix_stock_balance_filter
from bot.users.keyboards import inline_kb as kb
from bot.stocks.dao import CartDAO

search_router = Router()


RESULTS_PER_PAGE = 50


################ INLINE SEARCH PRODUCT #######################

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏",
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                switch_inline_query_current_chat=""
            )
        ]
    ]
)


@search_router.message(F.text == 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
async def send_search_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏:", reply_markup=inline_button)
    await message.delete()


###################################################################

@search_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery, state: FSMContext):
    query_text = inline_query.query.strip()
    offset = int(inline_query.offset) if inline_query.offset else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    models = await planfix_stock_balance_models() if query_text == "" else await planfix_stock_balance_models(query_text)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    page_models = models[offset:offset + RESULTS_PER_PAGE]

    results = []
    for index, (model_id, model_name) in enumerate(page_models):
        results.append(
            InlineQueryResultArticle(
                id=str(offset + index),
                title=f"{model_name}",
                input_message_content=InputTextMessageContent(
                    message_text=f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}"
                )
            )
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –∏—Å–ø–æ–ª—å–∑—É—è model_name –∫–∞–∫ –∫–ª—é—á
        await state.update_data({model_name: model_id})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    next_offset = str(
        offset + RESULTS_PER_PAGE) if len(models) > offset + RESULTS_PER_PAGE else ""
    await inline_query.answer(results, cache_time=1, next_offset=next_offset)


@search_router.message(F.text.contains("–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –º–æ–¥–µ–ª–∏:"))
async def process_selected_product(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º model_name –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    model_name = message.text.split(": ")[1].strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    state_data = await state.get_data()
    model_id = state_data.get(model_name)

    if model_id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
        return

    await message.answer(
        f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
        reply_markup=kb.search_keyboard()
    )

    await message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_name –∏ model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(model_name=model_name, model_id=model_id)


####################### –¶–ï–ù–ê –ü–ï–†–ï–ö–õ–ï–ô–ö–ò ###############################


@search_router.callback_query(F.data == "search_re-gluing")
async def handle_re_gluing(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_re_gluing = await planfix_stock_balance_filter(model_id=model_id, operation="1")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_re_gluing)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞: {price} RUB**"
    else:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.**"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–¶–µ–Ω–∞ –ø–µ—Ä–µ–∫–ª–µ–π–∫–∏' –¥–ª—è –º–æ–¥–µ–ª–∏:\n{prices_text}", parse_mode="Markdown"
    )
    await callback.answer()


def extract_price_from_data(data_re_gluing):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_re_gluing.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ü–†–û–î–ê–¢–¨ –ë–ò–¢–ò–ö ###############################


@search_router.callback_query(F.data == "search_crash-display")
async def handle_crash_display(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_crash_display_plus = await planfix_stock_balance_filter(model_id=model_id, operation="2")
    data_crash_display_minus = await planfix_stock_balance_filter(model_id=model_id, operation="3")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price_plus = extract_price_from_data(data_crash_display_plus)
    price_minus = extract_price_from_data(data_crash_display_minus)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫' –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}\n"
    if price_plus and float(price_plus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_plus} RUB\n"
    if price_minus and float(price_minus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_minus} RUB\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message)
    await callback.answer()


def extract_price_from_data(data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ì–û–¢–û–í–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø ###############################


@search_router.callback_query(F.data == "search_production")
async def handle_production(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    operation = "4"
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_production = await planfix_stock_balance_filter(model_id=model_id, operation=operation)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_production)
    balance = extract_balance_from_data(data_production)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_balance = f"–¶–µ–Ω–∞: {price} RUB –û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç."
    else:
        prices_balance = f"{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è'.\n–ú–æ–¥–µ–ª–∏: {model_name}\n"
        f"{prices_balance}", reply_markup=kb.product_keyboard(product_id=model_id, model_name=model_name, operation=operation)
    )
    await callback.answer()


def extract_price_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ó–ê–ü–ß–ê–°–¢–ò ###############################


@search_router.callback_query(F.data == "search_spare-parts")
async def handle_spare_parts(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_spare_parts = await planfix_stock_balance_filter(model_id=model_id, operation="5")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_spare_parts)
    balance = extract_balance_from_data(data_spare_parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_balance = f"–¶–µ–Ω–∞: {price} RUB –û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç."
    else:
        prices_balance = f"{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ó–∞–ø—á–∞—Å—Ç–∏'.\n–ú–æ–¥–µ–ª–∏: {model_name}\n"
        f"{prices_balance}"
    )
    await callback.answer()


def extract_price_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


############## –ó–ê–ú–û–†–û–ó–ö–ê ##################

# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
# @search_router.message(F.text.contains("—à—Ç.") & F.text.contains("–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:"))
# async def process_selected_product(message: Message, state: FSMContext):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     try:
#         product_info = message.text.split("\n")
#         product_name = product_info[0].split(": ")[1].strip()
#         product_id = "–Ω–µ —É–∫–∞–∑–∞–Ω"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ product_id

#         # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å –ø–æ–º–æ—â—å—é FSM
#         await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}. –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
#         await state.set_state(OrderState.waiting_for_quantity)
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#         await state.update_data(product_id=product_id)
#     except IndexError:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
# @search_router.message(OrderState.waiting_for_quantity)
# async def process_quantity(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     product_id = user_data['product_id']

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
#     if not message.text.isdigit():
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
#         return

#     quantity = int(message.text)

#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
#     await message.answer(f"–ó–∞–∫–∞–∑ –Ω–∞ {quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –ø—Ä–∏–Ω—è—Ç!")

#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.clear()
