from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.planfix import planfix_stock_balance_filter, planfix_all_production_filter
from bot.users.keyboards import inline_kb as kb
from bot.stocks.dao import CartDAO
import requests

from bot.config import pf_token, pf_url_rest

search_router = Router()


RESULTS_PER_PAGE = 50


################ INLINE SEARCH PRODUCT #######################

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏",
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                switch_inline_query_current_chat=""
            )
        ]
    ]
)


@search_router.message(F.text == 'üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏')
async def send_search_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏:", reply_markup=inline_button)
    await message.delete()


###################################################################

@search_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery, state: FSMContext):
    query_text = inline_query.query.strip()
    offset = int(inline_query.offset) if inline_query.offset else 0

    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
    if query_text == "":
        models = await planfix_stock_balance_models(offset=offset, limit=RESULTS_PER_PAGE)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –º–æ–¥–µ–ª—å ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ—Ñ—Ñ—Å–µ—Ç–∞
        models = await planfix_stock_balance_models(search_query=query_text)

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    for m in models[:5]:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(m)

    results = []
    for index, (model_id, model_name) in enumerate(models):
        if not model_name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å ID {model_id} –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è!")
            continue

        results.append(
            InlineQueryResultArticle(
                id=str(offset + index),
                title=model_name,  # Telegram —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã title –±—ã–ª –ù–ï –ø—É—Å—Ç—ã–º
                input_message_content=InputTextMessageContent(
                    message_text=f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}"
                )
            )
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.update_data({model_name: model_id})

    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    next_offset = str(offset + RESULTS_PER_PAGE) if query_text == "" and len(models) == RESULTS_PER_PAGE else ""

    if not results:
        await inline_query.answer([], cache_time=1, switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", switch_pm_parameter="start")
        return

    await inline_query.answer(results, cache_time=1, next_offset=next_offset)



####################### STOCK BALANCE (MODELS) ####################################

async def planfix_stock_balance_models(search_query=None, offset=0, limit=RESULTS_PER_PAGE):
    url = f"{pf_url_rest}/task/list"

    payload = {
        "offset": offset,
        "pageSize": limit,
        "filterId": "49864",
        "fields": "id,5556,5542,6640,6282,12140"
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {pf_token}"
    }

    response = requests.post(url, json=payload, headers=headers)
    data = response.json()

    all_models = data.get('tasks', [])
    result = []

    for task in all_models:
        for custom_field in task.get('customFieldData', []):
            if custom_field['field']['name'] == '–ú–æ–¥–µ–ª—å':
                model_id = custom_field['value']['id']
                model_name = custom_field['value']['value']

                if search_query and search_query.lower() not in model_name.lower():
                    continue

                result.append((model_id, model_name))

    return result




@search_router.message(F.text.contains("–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –º–æ–¥–µ–ª–∏:"))
async def process_selected_product(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º model_name –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    model_name = message.text.split(": ")[1].strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    state_data = await state.get_data()
    model_id = state_data.get(model_name)

    if model_id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
        return

    await message.answer(
        f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}",
        reply_markup=kb.search_keyboard()
    )

    await message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_name –∏ model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(model_name=model_name, model_id=model_id)


####################### –¶–ï–ù–ê –ü–ï–†–ï–ö–õ–ï–ô–ö–ò ###############################


@search_router.callback_query(F.data == "search_re-gluing")
async def handle_re_gluing(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_re_gluing = await planfix_stock_balance_filter(model_id=model_id, operation="1")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_re_gluing)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞: {price} RUB**"
    else:
        prices_text = f"**{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.**"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–¶–µ–Ω–∞ –ø–µ—Ä–µ–∫–ª–µ–π–∫–∏' –¥–ª—è –º–æ–¥–µ–ª–∏:\n{prices_text}", parse_mode="Markdown"
    )
    await callback.answer()


def extract_price_from_data(data_re_gluing):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_re_gluing.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ü–†–û–î–ê–¢–¨ –ë–ò–¢–ò–ö ###############################


@search_router.callback_query(F.data == "search_crash-display")
async def handle_crash_display(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_crash_display_plus = await planfix_stock_balance_filter(model_id=model_id, operation="2")
    data_crash_display_minus = await planfix_stock_balance_filter(model_id=model_id, operation="3")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price_plus = extract_price_from_data(data_crash_display_plus)
    price_minus = extract_price_from_data(data_crash_display_minus)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫' –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}\n"
    if price_plus and float(price_plus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_plus} RUB\n"
    if price_minus and float(price_minus) > 0:
        message += f"–¶–µ–Ω–∞ –±–∏—Ç–∏–∫–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π/—Ç–∞—á–æ–º: {price_minus} RUB\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message)
    await callback.answer()


def extract_price_from_data(data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ì–û–¢–û–í–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø ###############################


@search_router.callback_query(F.data == "search_production")
async def handle_production(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    operation = "4"
    
    data_production = await planfix_all_production_filter(model_id=model_id)
    
    if not data_production or "tasks" not in data_production:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.")
        return
    
    for task in data_production["tasks"]:
        production_id = task["id"]
        model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        for field in task.get("customFieldData", []):
            field_name = field["field"].get("name", "")
            if field_name == "–ú–æ–¥–µ–ª—å":
                model = field["value"].get("value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            elif field_name == "Price":
                price = field.get("value", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            elif field_name == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏":
                description = field.get("value", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{production_id}")]
            ]
        )
        
        message_text = (
            f"üìå <b>{model}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"‚ÑπÔ∏è {description}"
        )
        
        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.answer()



def extract_price_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_production):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_production.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


####################### –ó–ê–ü–ß–ê–°–¢–ò ###############################


@search_router.callback_query(F.data == "search_spare-parts")
async def handle_spare_parts(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–ª–µ–π–∫–µ
    data_spare_parts = await planfix_stock_balance_filter(model_id=model_id, operation="5")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_spare_parts)
    balance = extract_balance_from_data(data_spare_parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_balance = f"–¶–µ–Ω–∞: {price} RUB –û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç."
    else:
        prices_balance = f"{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ó–∞–ø—á–∞—Å—Ç–∏'.\n–ú–æ–¥–µ–ª–∏: {model_name}\n"
        f"{prices_balance}"
    )
    await callback.answer()


def extract_price_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–¶–µ–Ω–∞, RUB":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


def extract_balance_from_data(data_spare_parts):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = data_spare_parts.get("tasks", [])
        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ customFieldData
            for field_data in task.get("customFieldData", []):
                field_name = field_data.get("field", {}).get("name", "")
                if field_name == "–ü—Ä–∏—Ö–æ–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    return field_data.get("stringValue") or str(field_data.get("value", ""))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    return None


############## –ó–ê–ú–û–†–û–ó–ö–ê ##################

# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
# @search_router.message(F.text.contains("—à—Ç.") & F.text.contains("–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:"))
# async def process_selected_product(message: Message, state: FSMContext):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     try:
#         product_info = message.text.split("\n")
#         product_name = product_info[0].split(": ")[1].strip()
#         product_id = "–Ω–µ —É–∫–∞–∑–∞–Ω"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ product_id

#         # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å –ø–æ–º–æ—â—å—é FSM
#         await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}. –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
#         await state.set_state(OrderState.waiting_for_quantity)
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#         await state.update_data(product_id=product_id)
#     except IndexError:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
# @search_router.message(OrderState.waiting_for_quantity)
# async def process_quantity(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     product_id = user_data['product_id']

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
#     if not message.text.isdigit():
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
#         return

#     quantity = int(message.text)

#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
#     await message.answer(f"–ó–∞–∫–∞–∑ –Ω–∞ {quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –ø—Ä–∏–Ω—è—Ç!")

#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.clear()
