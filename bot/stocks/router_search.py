from aiogram import Router, F, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from loguru import logger

from bot.planfix import planfix_stock_balance_filter, planfix_price_re_gluing, planfix_stock_balance, planfix_basic_nomenclature_re_gluing
from bot.users.keyboards import inline_kb as kb
from bot.stocks.keyboards import inline_kb_cart as in_kb
from bot.stocks.dao import CartDAO, ModelDAO
from bot.utils.cache import get_cached_search_results, cache_search_results

from bot.operations import RE_GLUING_NAMES
from bot.config import pf_token, pf_url_rest

from bot.stocks.handlers_re_gluing import handle_re_gluing_common, add_re_gluing_cart
from bot.stocks.handlers_back_cover import handle_back_cover_common
from bot.stocks.handlers_production import handle_production_common, add_to_cart
from bot.stocks.handlers_crash_display import (
    handle_crash_display_common, 
    add_crash_display_search_ai_cart,
    CrashDisplayOrder,  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    process_quantity,   # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    process_photo       # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
)

from bot.utils.planfix_utils import extract_price_from_data, extract_balance_from_data

search_router = Router()

RESULTS_PER_PAGE = 50

################ INLINE SEARCH PRODUCT #######################

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏",
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                switch_inline_query_current_chat=""
            )
        ]
    ]
)

@search_router.message(F.text == 'üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏')
async def send_search_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏:", reply_markup=inline_button)
    await message.delete()

###################################################################

@search_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery, state: FSMContext):
    query_text = inline_query.query.strip()
    offset = int(inline_query.offset) if inline_query.offset else 0

    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ModelDAO
    if query_text == "":
        # –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
        models = await ModelDAO.search_models(query="", offset=offset, limit=RESULTS_PER_PAGE)
        logger.info(f"ModelDAO (–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å): –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
    else:
        # –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        models = await get_cached_search_results(query_text)
        if models is None:
            models = await ModelDAO.search_models(query=query_text, offset=offset, limit=RESULTS_PER_PAGE)
            if models:
                await cache_search_results(query_text, models)
        logger.info(f"ModelDAO (–ø–æ–∏—Å–∫): –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

    if not models:
        await inline_query.answer(
            [], cache_time=1, switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", switch_pm_parameter="start"
        )
        return

    # –§–æ—Ä–º–∞—Ç –¥–ª—è ModelDAO (model_id_int, model_name, model_engineer, model_id)
    results = [
        InlineQueryResultArticle(
            id=str(offset + index),
            title=model_name or model_id or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            description=f"–ò–Ω–∂–µ–Ω–µ—Ä: {model_engineer or '–Ω–µ —É–∫–∞–∑–∞–Ω'} | ID: {model_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            input_message_content=InputTextMessageContent(
                message_text=f"–ú–æ–¥–µ–ª—å: {model_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                             f"–ò–Ω–∂–µ–Ω–µ—Ä: {model_engineer or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                             f"ID: {model_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
        )
        for index, (model_id_int, model_name, model_engineer, model_id) in enumerate(models)
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    for _, model_name, _, model_id in models:
        if model_id:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ model_id –Ω–µ None
            await state.update_data({model_name or model_id: model_id})

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    next_offset = str(offset + RESULTS_PER_PAGE) if len(models) == RESULTS_PER_PAGE else ""

    await inline_query.answer(results, cache_time=1, next_offset=next_offset)

@search_router.message(F.text.contains("–ú–æ–¥–µ–ª—å:") & F.text.contains("–ò–Ω–∂–µ–Ω–µ—Ä:") & F.text.contains("ID:"))
async def process_selected_product(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º model_name, model_engineer –∏ model_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        lines = message.text.split("\n")
        model_name = lines[0].split(": ")[1].strip()
        model_engineer = lines[1].split(": ")[1].strip()
        model_id = lines[2].split(": ")[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        model_name = None if model_name == "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" else model_name
        model_engineer = None if model_engineer == "–Ω–µ —É–∫–∞–∑–∞–Ω" else model_engineer
        model_id = None if model_id == "–Ω–µ —É–∫–∞–∑–∞–Ω" else model_id

        if not model_id:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
            return

        await message.answer(
            f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name or model_id}",
            reply_markup=kb.search_keyboard()
        )

        await message.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º model_name –∏ model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(model_name=model_name, model_id=model_id)
    except IndexError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


####################### –¶–ï–ù–ê –ü–ï–†–ï–ö–õ–ï–ô–ö–ò ###############################

@search_router.callback_query(F.data == "search_re-gluing")
async def handle_re_gluing(callback: CallbackQuery, state: FSMContext):
    return await handle_re_gluing_common(callback, state)

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ –ü–ï–†–ï–ö–õ–ï–ô–ö–£

@search_router.callback_query(F.data.startswith('re-gluing-cart_'))
async def add_re_gluing_search_cart(callback_query: types.CallbackQuery):
    return await add_re_gluing_cart(callback_query, prefix='re-gluing-cart')


####################### –ó–ê–ú–ï–ù–ê –ó–ê–î–ù–ï–ô –ö–†–´–®–ö–ò ###############################

@search_router.callback_query(F.data == "search_back_cover")
async def handle_back_cover(callback: CallbackQuery, state: FSMContext):
    return await handle_back_cover_common(callback, state)


####################### –ü–†–û–î–ê–¢–¨ –ë–ò–¢–ò–ö ###############################

@search_router.callback_query(F.data == "search_crash-display")
async def handle_crash_display(callback: CallbackQuery, state: FSMContext):
    return await handle_crash_display_common(callback, state)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∏–∫

@search_router.callback_query(F.data.startswith('crash-display-cart_'))
async def add_crash_display_cart(callback_query: types.CallbackQuery, state: FSMContext):
    return await add_crash_display_search_ai_cart(callback_query, prefix='crash-display-cart', state=state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ç–æ
@search_router.message(CrashDisplayOrder.waiting_for_quantity)
async def process_quantity_handler(message: types.Message, state: FSMContext):
    return await process_quantity(message, state)

@search_router.message(CrashDisplayOrder.waiting_for_photo, F.photo)
async def process_photo_handler(message: types.Message, state: FSMContext):
    return await process_photo(message, state)

####################### –ì–û–¢–û–í–ê–Ø –ü–†–û–î–£–ö–¶–ò–Ø ###############################

@search_router.callback_query(F.data == "search_production")
async def handle_production(callback: CallbackQuery, state: FSMContext):
    return await handle_production_common(callback, state, operation="4")

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ –ì–û–¢–û–í–û–ô –ü–†–û–î–£–ö–¶–ò–ò

@search_router.callback_query(F.data.startswith('search-cart_'))
async def add_search_cart(callback_query: types.CallbackQuery):
    return await add_to_cart(callback_query, prefix='search-cart')

####################### –ó–ê–ü–ß–ê–°–¢–ò ###############################

@search_router.callback_query(F.data == "search_spare-parts")
async def handle_spare_parts(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    model_name = state_data.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    model_id = state_data.get('model_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—á–∞—Å—Ç—è—Ö
    data_spare_parts = await planfix_stock_balance_filter(model_id=model_id, operation="5")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = extract_price_from_data(data_spare_parts)
    balance = extract_balance_from_data(data_spare_parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if price:
        prices_balance = f"–¶–µ–Ω–∞: {price} RUB –û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç."
    else:
        prices_balance = f"{model_name}  –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ó–∞–ø—á–∞—Å—Ç–∏'.\n–ú–æ–¥–µ–ª–∏: {model_name}\n"
        f"{prices_balance}"
    )
    await callback.answer()