from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.planfix import planfix_stock_balance

stock_router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
RESULTS_PER_PAGE = 50


@stock_router.message(F.text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤')
async def stockbalance(message: Message):
    all_stock = await planfix_stock_balance()

    for product_name, stock_balance in all_stock:
        await message.answer(f'{product_name} | –û—Å—Ç–∞—Ç–æ–∫: {stock_balance} —à—Ç.')


@stock_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query_text = inline_query.query.strip()
    offset = int(inline_query.offset) if inline_query.offset else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    if query_text == "":  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = await planfix_stock_balance()
    else:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏
        products = await planfix_stock_balance(query_text)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    page_products = products[offset:offset + RESULTS_PER_PAGE]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ InlineQueryResult
    results = [
        InlineQueryResultArticle(
            id=str(offset + index),
            title=f"{product_name} - {stock_balance}",
            input_message_content=InputTextMessageContent(
                message_text=f"{product_name}: {stock_balance} —à—Ç."
            ),
            description=f"–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {stock_balance} —à—Ç."
        )
        for index, (product_name, stock_balance) in enumerate(page_products)
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_offset = str(
        offset + RESULTS_PER_PAGE) if len(products) > offset + RESULTS_PER_PAGE else ""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await inline_query.answer(results, cache_time=1, next_offset=next_offset)


# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                switch_inline_query_current_chat=""
            )
        ]
    ]
)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π


@stock_router.message(F.text == 'üìã –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
async def send_search_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:", reply_markup=inline_button)
