from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.planfix import planfix_stock_balance
from bot.users.keyboards import inline_kb as kb


stock_router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
RESULTS_PER_PAGE = 50


################ PRODUCT CATALOG #######################

@stock_router.message(F.text == 'üìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–∞')
async def stockbalance(message: Message):
    await message.answer('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=kb.device_brand_keyboard())


@stock_router.message(F.text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤')
async def stockbalance(message: Message):
    all_stock = await planfix_stock_balance()

    for product_name, stock_balance in all_stock:
        await message.answer(f'{product_name} | –û—Å—Ç–∞—Ç–æ–∫: {stock_balance} —à—Ç.')


################ INLINE SEARCH PRODUCT #######################

@stock_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query_text = inline_query.query.strip()
    offset = int(inline_query.offset) if inline_query.offset else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    if query_text == "":  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = await planfix_stock_balance()
    else:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏
        products = await planfix_stock_balance(query_text)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    page_products = products[offset:offset + RESULTS_PER_PAGE]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ InlineQueryResult
    results = [
        InlineQueryResultArticle(
            id=str(offset + index),
            title=f"{product_name} - {stock_balance}",
            input_message_content=InputTextMessageContent(
                message_text=f"{product_name}: {stock_balance} —à—Ç."
            ),
            description=f"–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {stock_balance} —à—Ç."
        )
        for index, (product_name, stock_balance) in enumerate(page_products)
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_offset = str(
        offset + RESULTS_PER_PAGE) if len(products) > offset + RESULTS_PER_PAGE else ""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await inline_query.answer(results, cache_time=1, next_offset=next_offset)


######################### VERSION 1 ##############################

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                switch_inline_query_current_chat=""
            )
        ]
    ]
)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π


@stock_router.message(F.text == 'üìã –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
async def send_search_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:", reply_markup=inline_button)


######################### VERSION 2 ##############################

# –°–æ–∑–¥–∞–µ–º FSM —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
class OrderState(StatesGroup):
    waiting_for_quantity = State()


@stock_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query_text = inline_query.query.strip()

    # –ó–¥–µ—Å—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
    products = await planfix_stock_balance(query_text)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ InlineQueryResult
    results = [
        InlineQueryResultArticle(
            id=str(index),
            title=f"{product_name} - {stock_balance}",
            input_message_content=InputTextMessageContent(
                message_text=f"–¢–æ–≤–∞—Ä: {product_name}\n–û—Å—Ç–∞—Ç–æ–∫: {stock_balance} —à—Ç.\nID —Ç–æ–≤–∞—Ä–∞: {product_id}"
            ),
            description=f"–î–æ—Å—Ç—É–ø–Ω–æ: {stock_balance} —à—Ç."
        )
        for index, (product_name, stock_balance, product_id) in enumerate(products)
    ]

    await inline_query.answer(results, cache_time=1)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
@stock_router.message(F.text.contains("—à—Ç.") & F.text.contains(":"))
async def process_selected_product(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        product_info = message.text.split("\n")
        product_name = product_info[0].split(": ")[1].strip()
        product_id = "–Ω–µ —É–∫–∞–∑–∞–Ω"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ product_id

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å –ø–æ–º–æ—â—å—é FSM
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_name}. –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
        await state.set_state(OrderState.waiting_for_quantity)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(product_id=product_id)
    except IndexError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@stock_router.message(OrderState.waiting_for_quantity)
async def process_quantity(message: Message, state: FSMContext):
    user_data = await state.get_data()
    product_id = user_data['product_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return

    quantity = int(message.text)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
    await message.answer(f"–ó–∞–∫–∞–∑ –Ω–∞ {quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –ø—Ä–∏–Ω—è—Ç!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
