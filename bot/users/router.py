from aiogram.filters import CommandObject, CommandStart
from loguru import logger
from aiogram.types import Message
from aiogram.dispatcher.router import Router
from bot.users.dao import UserDAO
from bot.users.keyboards import markup_kb
from bot.planfix import planfix_create_contact, planfix_create_chat

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    try:
        user_id = message.from_user.id
        user_info = await UserDAO.find_one_or_none(telegram_id=user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat_pf_id
        if user_info:
            if user_info.chat_pf_id:
                # –ï—Å–ª–∏ chat_pf_id –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await message.answer(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                    reply_markup=markup_kb.back_keyboard(user_id=user_id)
                )
                return result
            else:
                # –ï—Å–ª–∏ chat_pf_id –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_pf_id. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –≤ Planfix...")
                data_chat = await planfix_create_chat(contact_pf_id=user_info.contact_pf_id)
                if data_chat and 'id' in data_chat:
                    chat_pf_id = data_chat['id']
                    await UserDAO.update(
                        {"telegram_id": user_id},
                        chat_pf_id=chat_pf_id
                    )
                    logger.info(f"–ß–∞—Ç –≤ Planfix —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: chat_pf_id={chat_pf_id}")
                    result = await message.answer(
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ß–∞—Ç –≤ Planfix —Å–æ–∑–¥–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                        reply_markup=markup_kb.back_keyboard(user_id=user_id)
                    )
                    return result
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data_chat}")
                    result = await message.answer(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    return result

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await UserDAO.add(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Planfix
        data_contact = await planfix_create_contact(
            telegram_id=user_id,
            username=message.from_user.username or "Unknown",
            first_name=message.from_user.first_name or "",
            last_name=message.from_user.last_name or ""
        )

        if not data_contact or 'id' not in data_contact:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data_contact}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            return

        contact_pf_id = data_contact['id']
        await UserDAO.update(
            {"telegram_id": user_id},
            contact_pf_id=contact_pf_id
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ Planfix
        data_chat = await planfix_create_chat(contact_pf_id=contact_pf_id)
        if not data_chat or 'id' not in data_chat:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –≤ Planfix –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data_chat}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –≤ Planfix. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            return

        chat_pf_id = data_chat['id']
        await UserDAO.update(
            {"telegram_id": user_id},
            chat_pf_id=chat_pf_id
        )

        result = await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=markup_kb.back_keyboard(user_id=user_id)
        )
        return result
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")